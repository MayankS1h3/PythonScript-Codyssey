{
  "metadata": {
    "username": "shaMayank",
    "fetch_timestamp": "2025-08-02T18:38:12.134178",
    "total_submissions_fetched": 200,
    "fetcher_version": "4.0_comprehensive",
    "data_sources": [
      "rest",
      "graphql"
    ]
  },
  "user_profile": {
    "username": "shaMayank",
    "profile": {
      "realName": "shaMayank",
      "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg",
      "ranking": 993715,
      "reputation": 0,
      "aboutMe": "",
      "countryName": null,
      "company": null,
      "jobTitle": null,
      "school": null,
      "skillTags": [],
      "postViewCount": 0,
      "solutionCount": 0
    },
    "submitStatsGlobal": {
      "acSubmissionNum": [
        {
          "difficulty": "All",
          "count": 131,
          "submissions": 219
        },
        {
          "difficulty": "Easy",
          "count": 80,
          "submissions": 131
        },
        {
          "difficulty": "Medium",
          "count": 49,
          "submissions": 85
        },
        {
          "difficulty": "Hard",
          "count": 2,
          "submissions": 3
        }
      ],
      "totalSubmissionNum": [
        {
          "difficulty": "All",
          "count": 135,
          "submissions": 316
        },
        {
          "difficulty": "Easy",
          "count": 82,
          "submissions": 167
        },
        {
          "difficulty": "Medium",
          "count": 50,
          "submissions": 142
        },
        {
          "difficulty": "Hard",
          "count": 3,
          "submissions": 7
        }
      ]
    },
    "badges": [
      {
        "id": "7542693",
        "displayName": "50 Days Badge 2025",
        "icon": "https://assets.leetcode.com/static_assets/others/lg2550.png",
        "hoverText": "50 Days Badge 2025"
      }
    ],
    "userCalendar": {
      "activeYears": [
        2025
      ],
      "streak": 8,
      "totalActiveDays": 66,
      "submissionCalendar": "{\"1736899200\": 1, \"1737072000\": 9, \"1737417600\": 9, \"1737504000\": 18, \"1737590400\": 3, \"1738713600\": 2, \"1738800000\": 2, \"1741132800\": 2, \"1741219200\": 3, \"1741392000\": 1, \"1742428800\": 13, \"1745107200\": 11, \"1745193600\": 9, \"1745280000\": 6, \"1746835200\": 1, \"1746921600\": 19, \"1747094400\": 2, \"1747267200\": 1, \"1747440000\": 1, \"1747526400\": 1, \"1747699200\": 1, \"1747785600\": 6, \"1747872000\": 18, \"1747958400\": 4, \"1748044800\": 3, \"1748217600\": 4, \"1749686400\": 8, \"1749772800\": 8, \"1749945600\": 5, \"1750032000\": 13, \"1750118400\": 23, \"1750204800\": 10, \"1750291200\": 8, \"1750464000\": 1, \"1750550400\": 1, \"1750636800\": 1, \"1750809600\": 1, \"1750896000\": 1, \"1750982400\": 2, \"1751068800\": 1, \"1751155200\": 1, \"1751241600\": 1, \"1751414400\": 2, \"1751500800\": 1, \"1751587200\": 5, \"1751760000\": 1, \"1751846400\": 1, \"1752105600\": 1, \"1752192000\": 1, \"1752278400\": 1, \"1752364800\": 1, \"1752451200\": 1, \"1752710400\": 1, \"1752796800\": 6, \"1752883200\": 7, \"1752969600\": 8, \"1753056000\": 1, \"1753142400\": 11, \"1753228800\": 4, \"1753315200\": 1, \"1753574400\": 1, \"1753660800\": 1, \"1753747200\": 19, \"1753833600\": 4, \"1753920000\": 1, \"1754006400\": 1}"
    }
  },
  "submission_history": [
    {
      "id": "1719868569",
      "title": "Minimum Path Sum",
      "titleSlug": "minimum-path-sum",
      "timestamp": "1754072545",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1719868569/",
      "isPending": "Not Pending",
      "memory": "15.4 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1719868569,
      "question_id": 64,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "18 hours, 45 minutes",
      "timestamp": 1754072545,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1719868569/",
      "is_pending": "Not Pending",
      "title": "Minimum Path Sum",
      "memory": "15.4 MB",
      "code": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        for(int i = 1; i < m; ++i) grid[i][0] += grid[i-1][0];\n        for(int j = 1; j < n; ++j) grid[0][j] += grid[0][j-1];\n        for(int i = 1; i < m; ++i)\n            for(int j = 1; j < n; ++j)\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1]);\n        return grid[m-1][n-1];\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "minimum-path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 324,
      "_source": "rest"
    },
    {
      "id": "1718702734",
      "title": "Longest Common Prefix",
      "titleSlug": "longest-common-prefix",
      "timestamp": "1753985542",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1718702734/",
      "isPending": "Not Pending",
      "memory": "12 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1718702734,
      "question_id": 14,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 day, 18 hours",
      "timestamp": 1753985542,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1718702734/",
      "is_pending": "Not Pending",
      "title": "Longest Common Prefix",
      "memory": "12 MB",
      "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (strs.empty()) return \"\";\n        string prefix = strs[0];\n        for (int i = 1; i < strs.size(); i++) {\n            while (strs[i].find(prefix) != 0) {\n                prefix = prefix.substr(0, prefix.size() - 1);\n                if (prefix.empty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "longest-common-prefix",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 323,
      "_source": "rest"
    },
    {
      "id": "1717586918",
      "title": "Trapping Rain Water",
      "titleSlug": "trapping-rain-water",
      "timestamp": "1753904827",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "4 ms",
      "url": "/submissions/detail/1717586918/",
      "isPending": "Not Pending",
      "memory": "27.2 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1717586918,
      "question_id": 42,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 days, 17 hours",
      "timestamp": 1753904827,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "4 ms",
      "url": "/submissions/detail/1717586918/",
      "is_pending": "Not Pending",
      "title": "Trapping Rain Water",
      "memory": "27.2 MB",
      "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        if (n <= 2) return 0;          \n\n\n        vector<int> prefixMax(n);\n        prefixMax[0] = height[0];\n        for (int i = 1; i < n; ++i)\n            prefixMax[i] = max(prefixMax[i - 1], height[i]);\n\n\n        vector<int> suffixMax(n);\n        suffixMax[n - 1] = height[n - 1];\n        for (int i = n - 2; i >= 0; --i)\n            suffixMax[i] = max(suffixMax[i + 1], height[i]);\n\n        long long total = 0;           \n        for (int i = 0; i < n; ++i) {\n            int level = min(prefixMax[i], suffixMax[i]);\n            if (level > height[i])\n                total += level - height[i];\n        }\n        return static_cast<int>(total);\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "trapping-rain-water",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 322,
      "_source": "rest"
    },
    {
      "id": "1716806392",
      "title": "Invert Binary Tree",
      "titleSlug": "invert-binary-tree",
      "timestamp": "1753862304",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716806392/",
      "isPending": "Not Pending",
      "memory": "12.5 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716806392,
      "question_id": 226,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 5 hours",
      "timestamp": 1753862304,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716806392/",
      "is_pending": "Not Pending",
      "title": "Invert Binary Tree",
      "memory": "12.5 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if(!root){\n            return root;\n        }\n\n        queue<TreeNode*> q;\n        q.push(root);\n\n        while(!q.empty()){\n            TreeNode* node = q.front();\n            q.pop();\n\n            TreeNode* temp = node->left;\n            node->left = node->right;\n            node->right = temp;\n\n            if(node->left) q.push(node->left);\n            if(node->right) q.push(node->right);\n        }\n        return root;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "invert-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 321,
      "_source": "rest"
    },
    {
      "id": "1716693498",
      "title": "Path Sum",
      "titleSlug": "path-sum",
      "timestamp": "1753855679",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716693498/",
      "isPending": "Not Pending",
      "memory": "21.6 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716693498,
      "question_id": 112,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 7 hours",
      "timestamp": 1753855679,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716693498/",
      "is_pending": "Not Pending",
      "title": "Path Sum",
      "memory": "21.6 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(!root) return false;\n\n        stack<TreeNode*> path;\n        stack<int> sum;\n        path.push(root);\n        sum.push(root->val);\n\n        while(!path.empty()){\n            TreeNode* temp = path.top();\n            path.pop();\n            int tempVal = sum.top();\n            sum.pop();\n            if(temp->left == nullptr && temp->right == nullptr && tempVal == targetSum){\n                return true;\n            }\n\n            if(temp->left){\n                path.push(temp->left);\n                sum.push(temp->left->val + tempVal);\n            }\n            if(temp->right){\n                path.push(temp->right);\n                sum.push(temp->right->val + tempVal);\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 320,
      "_source": "rest"
    },
    {
      "id": 1716675269,
      "question_id": 112,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 7 hours",
      "timestamp": 1753854725,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1716675269/",
      "is_pending": "Not Pending",
      "title": "Path Sum",
      "memory": "21.6 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(!root) return false;\n\n        stack<TreeNode*> path;\n        stack<int> sum;\n        path.push(root);\n        sum.push(root->val);\n\n        while(!path.empty()){\n            TreeNode* temp = path.top();\n            path.pop();\n            int tempVal = sum.top();\n            sum.pop();\n            if(temp->left == nullptr && temp->right == nullptr && tempVal == targetSum){\n                return true;\n            }\n\n            if(temp->left){\n                path.push(temp->left);\n                sum.push(temp->left->val + tempVal);\n            }\n            if(temp->right){\n                path.push(temp->right);\n                sum.push(temp->right->val + tempVal);\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 319,
      "_source": "rest"
    },
    {
      "id": "1716409888",
      "title": "Binary Tree Level Order Traversal",
      "titleSlug": "binary-tree-level-order-traversal",
      "timestamp": "1753830384",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716409888/",
      "isPending": "Not Pending",
      "memory": "17.2 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716409888,
      "question_id": 102,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 14 hours",
      "timestamp": 1753830384,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716409888/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Level Order Traversal",
      "memory": "17.2 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        if(!root) return {};\n\n        queue<TreeNode*> q;\n        vector<vector<int>> res;\n        res.push_back({root->val});\n        q.push(root);\n\n        while(!q.empty()){\n            int size = q.size();\n\n            vector<int> temp;\n            for(int i = 0; i < size; i++){\n                TreeNode* node = q.front();\n                q.pop();\n\n                if(node->left){\n                    q.push(node->left);\n                    temp.push_back(node->left->val);\n                }\n                if(node->right){\n                    q.push(node->right);\n                    temp.push_back(node->right->val);\n                }\n            }\n            if(!temp.empty()){\n                res.push_back(temp);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "binary-tree-level-order-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 318,
      "_source": "rest"
    },
    {
      "id": "1716403766",
      "title": "Minimum Depth of Binary Tree",
      "titleSlug": "minimum-depth-of-binary-tree",
      "timestamp": "1753829405",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716403766/",
      "isPending": "Not Pending",
      "memory": "146.7 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716403766,
      "question_id": 111,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 14 hours",
      "timestamp": 1753829405,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716403766/",
      "is_pending": "Not Pending",
      "title": "Minimum Depth of Binary Tree",
      "memory": "146.7 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(!root) return 0;\n\n        queue<TreeNode*> q;\n        q.push(root);\n        int level = 0;\n\n        while(!q.empty()){\n            level++;\n            int size = q.size();\n\n            for(int i = 0; i < size; i++){\n                TreeNode *node = q.front();\n                q.pop();\n                if(!node->left && !node->right){\n                    return level;\n                }\n                if(node->left) q.push(node->left);\n                if(node->right) q.push(node->right);\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "title_slug": "minimum-depth-of-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 317,
      "_source": "rest"
    },
    {
      "id": "1716392311",
      "title": "Average of Levels in Binary Tree",
      "titleSlug": "average-of-levels-in-binary-tree",
      "timestamp": "1753827686",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716392311/",
      "isPending": "Not Pending",
      "memory": "23.9 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716392311,
      "question_id": 637,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 14 hours",
      "timestamp": 1753827686,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716392311/",
      "is_pending": "Not Pending",
      "title": "Average of Levels in Binary Tree",
      "memory": "23.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        vector<double> res;\n        if (!root) return res;\n\n        queue<TreeNode*> q;\n        q.push(root);\n\n        while (!q.empty()) {\n            int sz = q.size();\n            long long sum = 0;          // avoid overflow for large trees\n\n            for (int i = 0; i < sz; ++i) {\n                TreeNode* node = q.front();\n                q.pop();\n\n                sum += node->val;\n                if (node->left)  q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n            res.push_back(static_cast<double>(sum) / sz);\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "average-of-levels-in-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 316,
      "_source": "rest"
    },
    {
      "id": "1716360162",
      "title": "Single Number",
      "titleSlug": "single-number",
      "timestamp": "1753823507",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716360162/",
      "isPending": "Not Pending",
      "memory": "20.6 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716360162,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 15 hours",
      "timestamp": 1753823507,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716360162/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.6 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int n = nums.size();\n        int XOR = 0;\n\n        for(int num : nums){\n            XOR ^= num;\n        }\n\n        return XOR;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 315,
      "_source": "rest"
    },
    {
      "id": "1716356622",
      "title": "Minimum Size Subarray Sum",
      "titleSlug": "minimum-size-subarray-sum",
      "timestamp": "1753823117",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716356622/",
      "isPending": "Not Pending",
      "memory": "32 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716356622,
      "question_id": 209,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 16 hours",
      "timestamp": 1753823117,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716356622/",
      "is_pending": "Not Pending",
      "title": "Minimum Size Subarray Sum",
      "memory": "32 MB",
      "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n = nums.size();\n        int minLen = INT_MAX;\n        int sum = 0;\n        int left = 0;\n\n        for(int right = 0; right < n; right++){\n            sum += nums[right];\n\n            while(sum >= target && left <= right){\n                minLen = min(minLen, right - left + 1);\n                sum -= nums[left++];\n            }\n        }\n\n        return minLen == INT_MAX ? 0 : minLen;\n    }\n};",
      "compare_result": "111111111111111111111",
      "title_slug": "minimum-size-subarray-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 314,
      "_source": "rest"
    },
    {
      "id": 1716339202,
      "question_id": 209,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 16 hours",
      "timestamp": 1753821389,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1716339202/",
      "is_pending": "Not Pending",
      "title": "Minimum Size Subarray Sum",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n = nums.size();\n        int left = 0;\n        int right = 0;\n\n        int sum = 0;\n        int minLen = INT_MAX;\n\n        while(right < n){\n            sum += nums[right];\n            \n            if(sum < target){\n                right++;\n            }else if(sum > target){\n                while(sum > target){\n                    sum -= nums[left++];\n                }\n                right++;\n            }\n\n            if(sum == target){\n                int len = right - left;\n                minLen = min(minLen, len);\n            }\n        }\n        return minLen != INT_MAX ? minLen : 0;\n    }\n};",
      "compare_result": "111001100101000110000",
      "title_slug": "minimum-size-subarray-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 313,
      "_source": "rest"
    },
    {
      "id": "1716318776",
      "title": "Contains Duplicate II",
      "titleSlug": "contains-duplicate-ii",
      "timestamp": "1753819584",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "77 ms",
      "url": "/submissions/detail/1716318776/",
      "isPending": "Not Pending",
      "memory": "98.8 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716318776,
      "question_id": 219,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 17 hours",
      "timestamp": 1753819584,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "77 ms",
      "url": "/submissions/detail/1716318776/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate II",
      "memory": "98.8 MB",
      "code": "class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        int n = nums.size();\n        unordered_map<int,int> mpp;\n\n        for(int i = 0; i < n; i++){\n            if(mpp.find(nums[i]) == mpp.end()){\n                mpp[nums[i]] = i;\n            }else{\n                int diff = i - mpp[nums[i]];\n                if(diff <= k){\n                    return true;\n                }else{\n                    mpp[nums[i]] = i;\n                }\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 312,
      "_source": "rest"
    },
    {
      "id": "1716269453",
      "title": "Squares of a Sorted Array",
      "titleSlug": "squares-of-a-sorted-array",
      "timestamp": "1753816104",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "5 ms",
      "url": "/submissions/detail/1716269453/",
      "isPending": "Not Pending",
      "memory": "31.3 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716269453,
      "question_id": 1019,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 17 hours",
      "timestamp": 1753816104,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "5 ms",
      "url": "/submissions/detail/1716269453/",
      "is_pending": "Not Pending",
      "title": "Squares of a Sorted Array",
      "memory": "31.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> res;\n        int sqr = 0;\n\n        for(int i = 0; i < n; i++){\n            sqr = nums[i] * nums[i];\n            res.push_back(sqr);\n        }\n\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "squares-of-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 311,
      "_source": "rest"
    },
    {
      "id": 1716269121,
      "question_id": 1019,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 17 hours",
      "timestamp": 1753816085,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "11 ms",
      "url": "/submissions/detail/1716269121/",
      "is_pending": "Not Pending",
      "title": "Squares of a Sorted Array",
      "memory": "31.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> res;\n        int sqr = 0;\n\n        for(int i = 0; i < n; i++){\n            sqr = nums[i] * nums[i];\n            res.push_back(sqr);\n        }\n\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "squares-of-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 310,
      "_source": "rest"
    },
    {
      "id": "1716145625",
      "title": "Number of Islands",
      "titleSlug": "number-of-islands",
      "timestamp": "1753810400",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "29 ms",
      "url": "/submissions/detail/1716145625/",
      "isPending": "Not Pending",
      "memory": "24.5 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716145625,
      "question_id": 200,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 19 hours",
      "timestamp": 1753810400,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "29 ms",
      "url": "/submissions/detail/1716145625/",
      "is_pending": "Not Pending",
      "title": "Number of Islands",
      "memory": "24.5 MB",
      "code": "class Solution {\nprivate:\n    void bfs(int r, int c, vector<vector<int>>& vis, vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        queue<pair<int,int>> q;\n        vis[r][c] = 1;\n        q.push({r, c});\n        int dr[4] = {-1, 0, 1, 0};\n        int dc[4] = {0, 1, 0, -1};\n        while (!q.empty()) {\n            auto [x, y] = q.front();\n            q.pop();\n            for (int k = 0; k < 4; ++k) {\n                int nx = x + dr[k], ny = y + dc[k];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] == '1' && !vis[nx][ny]) {\n                    vis[nx][ny] = 1;\n                    q.push({nx, ny});\n                }\n            }\n        }\n    }\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size(), cnt = 0;\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                if (grid[i][j] == '1' && !vis[i][j]) {\n                    ++cnt;\n                    bfs(i, j, vis, grid);\n                }\n        return cnt;\n    }\n};\n",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "title_slug": "number-of-islands",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 309,
      "_source": "rest"
    },
    {
      "id": "1716088866",
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
      "timestamp": "1753807983",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "4 ms",
      "url": "/submissions/detail/1716088866/",
      "isPending": "Not Pending",
      "memory": "14.7 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1716088866,
      "question_id": 1482,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 20 hours",
      "timestamp": 1753807983,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "4 ms",
      "url": "/submissions/detail/1716088866/",
      "is_pending": "Not Pending",
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "memory": "14.7 MB",
      "code": "class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> temp(nums);\n        unordered_map<int,int> mpp;\n        vector<int> res;\n\n        sort(temp.begin(), temp.end());\n\n        for(int i = 0; i < n; i++){\n            if(mpp.find(temp[i]) == mpp.end()){\n                mpp[temp[i]] = i;\n            }\n        }\n\n        for(int i = 0; i < n; i++){\n            res.push_back(mpp[nums[i]]);\n        }\n\n        return res;\n\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "how-many-numbers-are-smaller-than-the-current-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 308,
      "_source": "rest"
    },
    {
      "id": "1715914656",
      "title": "Two Sum",
      "titleSlug": "two-sum",
      "timestamp": "1753799861",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "1 ms",
      "url": "/submissions/detail/1715914656/",
      "isPending": "Not Pending",
      "memory": "14.8 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1715914656,
      "question_id": 1,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 22 hours",
      "timestamp": 1753799861,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1715914656/",
      "is_pending": "Not Pending",
      "title": "Two Sum",
      "memory": "14.8 MB",
      "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        unordered_map<int,int> seen;\n        int diff;\n\n        for(int i = 0; i < n; i++){\n            diff = target - nums[i];\n            if(seen.find(diff) != seen.end()){\n                return {seen[diff], i};\n            }\n            seen[nums[i]] = i;\n        }\n\n        return {-1,-1};\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "two-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 307,
      "_source": "rest"
    },
    {
      "id": 1715893306,
      "question_id": 1,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 22 hours",
      "timestamp": 1753798829,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1715893306/",
      "is_pending": "Not Pending",
      "title": "Two Sum",
      "memory": "14.6 MB",
      "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        vector<pair<int,int>> numsIdx;\n        vector<int> res;\n\n        for(int i = 0; i < n; i++){\n            numsIdx.push_back({nums[i], i});\n        }\n\n        sort(numsIdx.begin(), numsIdx.end());\n\n        int start = 0;\n        int end = n - 1;\n\n        while(start < end){\n            int mid = start + (end - start) / 2;\n            int sum = numsIdx[start].first + numsIdx[end].first;\n\n            if(sum == target){\n                return {numsIdx[start].second, numsIdx[end].second};\n            }else if(sum > target){\n                end--;\n            }else{\n                start++;\n            }\n        }\n\n        return {-1,-1};\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "two-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 306,
      "_source": "rest"
    },
    {
      "id": "1715805955",
      "title": "Find All Numbers Disappeared in an Array",
      "titleSlug": "find-all-numbers-disappeared-in-an-array",
      "timestamp": "1753794321",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "91 ms",
      "url": "/submissions/detail/1715805955/",
      "isPending": "Not Pending",
      "memory": "66.1 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1715805955,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753794321,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "91 ms",
      "url": "/submissions/detail/1715805955/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "66.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        set<int> st;\n        vector<int> res;\n\n        for(int num : nums){\n            st.insert(num);\n        }\n\n        for(int i = 1; i <= n; i++){\n            if(st.find(i) == st.end()){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 305,
      "_source": "rest"
    },
    {
      "id": 1715805808,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753794312,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "84 ms",
      "url": "/submissions/detail/1715805808/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "66.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        set<int> st;\n        vector<int> res;\n\n        for(int num : nums){\n            st.insert(num);\n        }\n\n        for(int i = 1; i <= n; i++){\n            if(st.find(i) == st.end()){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 304,
      "_source": "rest"
    },
    {
      "id": 1715797260,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793825,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1715797260/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "52.9 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 303,
      "_source": "rest"
    },
    {
      "id": 1715797130,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793818,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "16 ms",
      "url": "/submissions/detail/1715797130/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "52.9 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 302,
      "_source": "rest"
    },
    {
      "id": 1715796643,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793791,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1715796643/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "53 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 301,
      "_source": "rest"
    },
    {
      "id": "1715769496",
      "title": "Missing Number",
      "titleSlug": "missing-number",
      "timestamp": "1753792135",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1715769496/",
      "isPending": "Not Pending",
      "memory": "21.8 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1715769496,
      "question_id": 268,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753792135,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1715769496/",
      "is_pending": "Not Pending",
      "title": "Missing Number",
      "memory": "21.8 MB",
      "code": "class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        int expectedSum = (n * (n+1)) / 2;\n        int actualSum = 0;\n\n        for(int num : nums){\n            actualSum += num;\n        }\n        return expectedSum - actualSum;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "missing-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 300,
      "_source": "rest"
    },
    {
      "id": "1714925087",
      "title": "Permutations",
      "titleSlug": "permutations",
      "timestamp": "1753726290",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1714925087/",
      "isPending": "Not Pending",
      "memory": "10.4 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1714925087,
      "question_id": 46,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days, 18 hours",
      "timestamp": 1753726290,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1714925087/",
      "is_pending": "Not Pending",
      "title": "Permutations",
      "memory": "10.4 MB",
      "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        backtrack(0, nums, res);\n        return res;\n    }\nprivate:\n    void backtrack(int first, vector<int>& nums, vector<vector<int>>& res) {\n        if (first == nums.size()) {\n            res.push_back(nums);\n            return;\n        }\n        for (int i = first; i < nums.size(); ++i) {\n            swap(nums[first], nums[i]);\n            backtrack(first + 1, nums, res);\n            swap(nums[first], nums[i]);\n        }\n    }\n};\n",
      "compare_result": "11111111111111111111111111",
      "title_slug": "permutations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 299,
      "_source": "rest"
    },
    {
      "id": "1713722410",
      "title": "Print in Order",
      "titleSlug": "print-in-order",
      "timestamp": "1753640366",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "17 ms",
      "url": "/submissions/detail/1713722410/",
      "isPending": "Not Pending",
      "memory": "9.6 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1713722410,
      "question_id": 1203,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "5 days, 18 hours",
      "timestamp": 1753640366,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "17 ms",
      "url": "/submissions/detail/1713722410/",
      "is_pending": "Not Pending",
      "title": "Print in Order",
      "memory": "9.6 MB",
      "code": "#include <functional>\n#include <mutex>\n#include <condition_variable>\n\nclass Foo {\n    std::mutex mtx;\n    std::condition_variable cv;\n    int turn = 1;\npublic:\n    void first(std::function<void()> printFirst) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 1; });\n        printFirst();\n        turn = 2;\n        cv.notify_all();\n    }\n    void second(std::function<void()> printSecond) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 2; });\n        printSecond();\n        turn = 3;\n        cv.notify_all();\n    }\n    void third(std::function<void()> printThird) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 3; });\n        printThird();\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "print-in-order",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 298,
      "_source": "rest"
    },
    {
      "id": "1710101788",
      "title": "Symmetric Tree",
      "titleSlug": "symmetric-tree",
      "timestamp": "1753381489",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1710101788/",
      "isPending": "Not Pending",
      "memory": "18.4 MB",
      "topicTags": [],
      "_source": "graphql"
    },
    {
      "id": 1710101788,
      "question_id": 101,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 1 day",
      "timestamp": 1753381489,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1710101788/",
      "is_pending": "Not Pending",
      "title": "Symmetric Tree",
      "memory": "18.4 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool mirror(TreeNode* a, TreeNode* b) {\n        if (!a || !b) return a == b;\n        if (a->val != b->val) return false;\n        return mirror(a->left, b->right) && mirror(a->right, b->left);\n    }\npublic:\n    bool isSymmetric(TreeNode* root) {\n        return mirror(root->left, root->right);\n    }\n};\n",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "symmetric-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 297,
      "_source": "rest"
    },
    {
      "id": 1709028448,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753306138,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1709028448/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "21.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool helperFunc(TreeNode* root, TreeNode* min, TreeNode* max){\n        if(!root) return true;\n        if(min != nullptr && root->val <= min->val){\n            return false;\n        }\n        if(max != nullptr && root->val >= max->val){\n            return false;\n        }\n\n        return helperFunc(root->left, min, root)\n                && helperFunc(root->right, root, max);\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        return helperFunc(root, nullptr, nullptr);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 296,
      "_source": "rest"
    },
    {
      "id": 1708956195,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753299357,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1708956195/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        if(!root) return true;\n\n        bool leftSubTree = isValidBST(root->left);\n        bool rightSubTree = isValidBST(root->right);\n\n        bool left = true;\n        bool right = true;\n\n        if(root->left && root->val <= root->left->val){\n            left = false;\n        }\n        if(root->right && root->val >= root->right->val){\n            right = false;\n        }\n\n        return leftSubTree && rightSubTree && left && right;\n    }\n};",
      "compare_result": "11111111111100010010011111111111111111111111111111111111111111111111111111011111011111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 295,
      "_source": "rest"
    },
    {
      "id": 1708954803,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753299253,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1708954803/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        if(!root) return true;\n\n        bool leftSubTree = isValidBST(root->left);\n        bool rightSubTree = isValidBST(root->right);\n\n        bool left = true;\n        bool right = true;\n\n        if(root->left && root->val < root->left->val){\n            left = false;\n        }\n        if(root->right && root->val > root->right->val){\n            right = false;\n        }\n\n        return leftSubTree && rightSubTree && left && right;\n    }\n};",
      "compare_result": "11110001101100010010011111111111111111111101111111111111111011110000111111011110011111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 294,
      "_source": "rest"
    },
    {
      "id": 1708798987,
      "question_id": 104,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753291327,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1708798987/",
      "is_pending": "Not Pending",
      "title": "Maximum Depth of Binary Tree",
      "memory": "18.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(!root) return 0;\n        int maximumDepth = max(maxDepth(root->left), maxDepth(root->right));\n        return maximumDepth + 1;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "maximum-depth-of-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 293,
      "_source": "rest"
    },
    {
      "id": 1707837868,
      "question_id": 349,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753227415,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1707837868/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Arrays",
      "memory": "14.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> st;\n        vector<int> res;\n\n        for(auto const &num : nums1){\n            st.insert(num);\n        }\n        for(auto const &num : nums2){\n            if(st.count(num)){\n                if( find(res.begin(), res.end(), num) == res.end() ){\n                    res.push_back(num);\n                }\n            }\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-arrays",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 292,
      "_source": "rest"
    },
    {
      "id": 1707833106,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226666,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707833106/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.5 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int xorRes = 0;\n\n        for(int num : nums){\n            xorRes ^= num;\n        }\n\n        return xorRes;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 291,
      "_source": "rest"
    },
    {
      "id": 1707833051,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226658,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "2 ms",
      "url": "/submissions/detail/1707833051/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.5 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int xorRes = 0;\n\n        for(int num : nums){\n            xorRes ^= num;\n        }\n\n        return xorRes;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 290,
      "_source": "rest"
    },
    {
      "id": 1707829598,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226114,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "55 ms",
      "url": "/submissions/detail/1707829598/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "90.7 MB",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_map<int, int> mp;\n\n        for(int i = 0; i < nums.size(); i++){\n            if(mp.find(nums[i]) != mp.end()) return true;\n            mp[nums[i]] = i;\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 289,
      "_source": "rest"
    },
    {
      "id": 1707828539,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225941,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1707828539/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_map<int, int> mp;\n\n        for(int i = 0; i < nums.size(); i++){\n            if(mp.find(nums[i]) != mp.end()) return true;\n            mp[i] = nums[i];\n        }\n        return false;\n    }\n};",
      "compare_result": "11111010101111100000110110101101011001001000101111001111111111111000011111010",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 288,
      "_source": "rest"
    },
    {
      "id": 1707826686,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225650,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "106 ms",
      "url": "/submissions/detail/1707826686/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "92.4 MB",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        set<int> st;\n\n        for(auto const &num : nums){\n            if(st.find(num) != st.end()) return true;\n            st.insert(num);\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 287,
      "_source": "rest"
    },
    {
      "id": 1707824412,
      "question_id": 189,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225291,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707824412/",
      "is_pending": "Not Pending",
      "title": "Rotate Array",
      "memory": "29.6 MB",
      "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        if(n <= 1){\n            return;\n        }\n\n        k %= n;\n\n        int start = 0;\n        int end = n - k - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = n - k;\n        end = n -1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = 0;\n        end = n - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "rotate-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 286,
      "_source": "rest"
    },
    {
      "id": 1707815352,
      "question_id": 189,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753223873,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1707815352/",
      "is_pending": "Not Pending",
      "title": "Rotate Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n\n        int start = 0;\n        int end = n - k - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = n - k;\n        end = n -1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = 0;\n        end = n - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n    }\n};",
      "compare_result": "111100000000000000000000000000000000000",
      "title_slug": "rotate-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 285,
      "_source": "rest"
    },
    {
      "id": 1707811099,
      "question_id": 26,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753223246,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707811099/",
      "is_pending": "Not Pending",
      "title": "Remove Duplicates from Sorted Array",
      "memory": "22.6 MB",
      "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int n = nums.size();\n        int slow = 0;\n\n        for(int fast = 0; fast < n; fast++){\n            if(nums[fast] != nums[slow]){\n                swap(nums[slow + 1], nums[fast]);\n                slow++;\n            }\n        }\n        return slow + 1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-duplicates-from-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 284,
      "_source": "rest"
    },
    {
      "id": 1707807468,
      "question_id": 283,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753222728,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707807468/",
      "is_pending": "Not Pending",
      "title": "Move Zeroes",
      "memory": "24 MB",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n = nums.size();\n        int slow = 0;\n        for(int fast = 0; fast < n; fast++){\n            if(nums[fast] != 0){\n                swap(nums[slow++], nums[fast]);\n            }\n        }\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "move-zeroes",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 283,
      "_source": "rest"
    },
    {
      "id": 1707634914,
      "question_id": 8,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753208497,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707634914/",
      "is_pending": "Not Pending",
      "title": "String to Integer (atoi)",
      "memory": "9.2 MB",
      "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        int i = 0, sign = 1, result = 0;\n        while (i < s.size() && s[i] == ' ') i++;\n        if (i < s.size() && (s[i] == '+' || s[i] == '-')) {\n            sign = (s[i] == '-') ? -1 : 1;\n            i++;\n        }\n        while (i < s.size() && isdigit(s[i])) {\n            int digit = s[i] - '0';\n            if (result > (INT_MAX - digit) / 10)\n                return sign == 1 ? INT_MAX : INT_MIN;\n            result = result * 10 + digit;\n            i++;\n        }\n        return result * sign;\n    }\n};\n",
      "compare_result
      "title_slug": "string-to-integer-atoi",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 282,
      "_source": "rest"
    },
    {
      "id": 1706308487,
      "question_id": 350,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 4 days",
      "timestamp": 1753120374,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1706308487/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Arrays II",
      "memory": "15 MB",
      "code": "class Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int, int> m;\n        vector<int> res;\n        for (int num : nums1) m[num]++;\n        for (int num : nums2) {\n            if (m[num] > 0) {\n                res.push_back(num);\n                m[num]--;\n            }\n        }\n        return res;\n    }\n};\n",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-arrays-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 281,
      "_source": "rest"
    },
    {
      "id": 1704681415,
      "question_id": 619,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010604,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "412 ms",
      "url": "/submissions/detail/1704681415/",
      "is_pending": "Not Pending",
      "title": "Biggest Single Number",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect max(num) as num\nfrom (select num\n    from MyNumbers\n    group by num\n    having count(*) = 1) temp;",
      "compare_result": "111111111111111111",
      "title_slug": "biggest-single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 280,
      "_source": "rest"
    },
    {
      "id": 1704677323,
      "question_id": 1877,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010324,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "479 ms",
      "url": "/submissions/detail/1704677323/",
      "is_pending": "Not Pending",
      "title": "Find Followers Count",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect user_id, \ncount(distinct follower_id) as followers_count\nfrom Followers\ngroup by user_id;\n",
      "compare_result": "1111111111111111111111",
      "title_slug": "find-followers-count",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 279,
      "_source": "rest"
    },
    {
      "id": 1704675032,
      "question_id": 596,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010170,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "328 ms",
      "url": "/submissions/detail/1704675032/",
      "is_pending": "Not Pending",
      "title": "Classes With at Least 5 Students",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect class\nfrom Courses\ngroup by class\nhaving count(distinct student) >= 5;",
      "compare_result": "11111111111",
      "title_slug": "classes-with-at-least-5-students",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 278,
      "_source": "rest"
    },
    {
      "id": 1704463171,
      "question_id": 2495,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752994915,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "548 ms",
      "url": "/submissions/detail/1704463171/",
      "is_pending": "Not Pending",
      "title": "Number of Unique Subjects Taught by Each Teacher",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect t.teacher_id,\ncount(distinct t.subject_id) as cnt\nfrom Teacher t\ngroup by t.teacher_id;",
      "compare_result": "11111111111111",
      "title_slug": "number-of-unique-subjects-taught-by-each-teacher",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 277,
      "_source": "rest"
    },
    {
      "id": 1704450017,
      "question_id": 1773,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752994084,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "938 ms",
      "url": "/submissions/detail/1704450017/",
      "is_pending": "Not Pending",
      "title": "Percentage of Users Attended a Contest",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nwith TotalUsers as (\n    select count(user_id) as total_count from Users\n    ) \nselect r.contest_id, \nround(count(r.user_id) * 100 / tu.total_count, 2) as percentage\nfrom Register r\ncross join TotalUsers tu\ngroup by r.contest_id\norder by percentage desc, r.contest_id asc;",
      "compare_result": "11111111111111",
      "title_slug": "percentage-of-users-attended-a-contest",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 276,
      "_source": "rest"
    },
    {
      "id": 1704369811,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752988803,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "973 ms",
      "url": "/submissions/detail/1704369811/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nifnull(round(sum(p.price * u.units) / sum(u.units),2), 0) as average_price\nfrom Prices p\nleft join UnitsSold u\non p.product_id = u.product_id\nand u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111111111111111111",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 275,
      "_source": "rest"
    },
    {
      "id": 1704354580,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752987677,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1704354580/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nifnull(round(sum(p.price * u.units) / sum(u.units),2), 0) as average_price\nfrom Prices p\nleft join UnitsSold u\non p.product_id = u.product_id\nwhere u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111011111111111100",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 274,
      "_source": "rest"
    },
    {
      "id": 1704348866,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752987243,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1704348866/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nround(sum(p.price * u.units) / sum(u.units),2) as average_price\nfrom Prices p\njoin UnitsSold u\non p.product_id = u.product_id\nwhere u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111011111111111100",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 273,
      "_source": "rest"
    },
    {
      "id": 1703996614,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954123,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "570 ms",
      "url": "/submissions/detail/1703996614/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.project_id, round(avg(e.experience_years), 2) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": "11111111",
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 272,
      "_source": "rest"
    },
    {
      "id": 1703996472,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954113,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703996472/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.project_id, round(avg(e.experience_years), 2) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": null,
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 271,
      "_source": "rest"
    },
    {
      "id": 1703995367,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954025,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1703995367/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.project_id, avg(e.experience_years) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": "11100000",
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 270,
      "_source": "rest"
    },
    {
      "id": 1703990089,
      "question_id": 620,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953625,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "266 ms",
      "url": "/submissions/detail/1703990089/",
      "is_pending": "Not Pending",
      "title": "Not Boring Movies",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect * \nfrom Cinema\nwhere id % 2 = 1 and description != 'boring'\norder by rating desc;",
      "compare_result": "11111111",
      "title_slug": "not-boring-movies",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 269,
      "_source": "rest"
    },
    {
      "id": 1703990007,
      "question_id": 620,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953619,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703990007/",
      "is_pending": "Not Pending",
      "title": "Not Boring Movies",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect * \nfrom Cinema\nwhere id % 2 = 1 and description != 'boring'\norder by rating desc;",
      "compare_result": null,
      "title_slug": "not-boring-movies",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 268,
      "_source": "rest"
    },
    {
      "id": 1703984771,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953217,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703984771/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect e2.name\nfrom Employee e1\njoin Employee e2\non e1.managerId = e2.id\ngroup by e2.name, e2.id\nhaving count(*) >= 5;",
      "compare_result": null,
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 267,
      "_source": "rest"
    },
    {
      "id": 1703984542,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953198,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "387 ms",
      "url": "/submissions/detail/1703984542/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect e2.name\nfrom Employee e1\njoin Employee e2\non e1.managerId = e2.id\ngroup by e2.id\nhaving count(*) >= 5;",
      "compare_result": "11111111111",
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 266,
      "_source": "rest"
    },
    {
      "id": 1703969898,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752952168,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "389 ms",
      "url": "/submissions/detail/1703969898/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect name \nfrom Employee\nwhere id in\n    (select managerId\n    from Employee\n    group by managerId\n    having count(*) >= 5);\n",
      "compare_result": "11111111111",
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 265,
      "_source": "rest"
    },
    {
      "id": 1703850300,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945632,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703850300/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 264,
      "_source": "rest"
    },
    {
      "id": 1703850171,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945624,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703850171/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 263,
      "_source": "rest"
    },
    {
      "id": 1703849863,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945610,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "2107 ms",
      "url": "/submissions/detail/1703849863/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": "11111111111111",
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 262,
      "_source": "rest"
    },
    {
      "id": 1703849760,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945604,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703849760/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 261,
      "_source": "rest"
    },
    {
      "id": 1703848256,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945527,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1452 ms",
      "url": "/submissions/detail/1703848256/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": "11111111111111",
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 260,
      "_source": "rest"
    },
    {
      "id": 1703846579,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945444,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703846579/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 259,
      "_source": "rest"
    },
    {
      "id": 1703846430,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945437,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703846430/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 258,
      "_source": "rest"
    },
    {
      "id": 1702188613,
      "question_id": 577,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752826467,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "971 ms",
      "url": "/submissions/detail/1702188613/",
      "is_pending": "Not Pending",
      "title": "Employee Bonus",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect e.name, b.bonus\nfrom Employee e \nleft join Bonus b\non e.empId = b.empId\nwhere b.bonus <  1000 or b.bonus is null;",
      "compare_result": "111111111111111111111",
      "title_slug": "employee-bonus",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 257,
      "_source": "rest"
    },
    {
      "id": 1702179366,
      "question_id": 197,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752825756,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1702179366/",
      "is_pending": "Not Pending",
      "title": "Rising Temperature",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect id \nfrom (  select w.*,\n        lag(temperature) over (order by recordDate) as prev_day_temp\n        from Weather w) temp\nwhere temp.temperature > temp.prev_day_temp;",
      "compare_result": "111111111011110",
      "title_slug": "rising-temperature",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 256,
      "_source": "rest"
    },
    {
      "id": 1702178689,
      "question_id": 197,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752825702,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1702178689/",
      "is_pending": "Not Pending",
      "title": "Rising Temperature",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect id \nfrom (  select w.*,\n        lag(temperature) over () as prev_day_temp\n        from Weather w) temp\nwhere temp.temperature > temp.prev_day_temp;",
      "compare_result": "111111010010000",
      "title_slug": "rising-temperature",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 255,
      "_source": "rest"
    },
    {
      "id": 1702169118,
      "question_id": 1724,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752824941,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1284 ms",
      "url": "/submissions/detail/1702169118/",
      "is_pending": "Not Pending",
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect customer_id, count(v.visit_id) as count_no_trans\nfrom Visits v\nleft join Transactions t\non v.visit_id = t.visit_id\nwhere t.transaction_id is NULL\ngroup by v.customer_id;\n",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 254,
      "_source": "rest"
    },
    {
      "id": 1702160918,
      "question_id": 1724,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752824305,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1399 ms",
      "url": "/submissions/detail/1702160918/",
      "is_pending": "Not Pending",
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect customer_id, count(*) as count_no_trans\nfrom Visits\nwhere visit_id not in (select distinct visit_id from Transactions)\ngroup by customer_id;",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 253,
      "_source": "rest"
    },
    {
      "id": 1702144356,
      "question_id": 1153,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752823122,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1179 ms",
      "url": "/submissions/detail/1702144356/",
      "is_pending": "Not Pending",
      "title": "Product Sales Analysis I",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.product_name, s.year, s.price\nfrom Sales s\nleft join Product p\non s.product_id = p.product_id;",
      "compare_result": "1111111111111",
      "title_slug": "product-sales-analysis-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 252,
      "_source": "rest"
    },
    {
      "id": 1701622709,
      "question_id": 100,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 1 day",
      "timestamp": 1752775093,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1701622709/",
      "is_pending": "Not Pending",
      "title": "Same Tree",
      "memory": "12.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n * int val;\n * TreeNode *left;\n * TreeNode *right;\n * TreeNode() : val(0), left(nullptr), right(nullptr) {}\n * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (!p && !q) {\n            return true;\n        }\n        if (!p || !q || p->val != q->val) {\n            return false;\n        }\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "same-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 251,
      "_source": "rest"
    },
    {
      "id": 1697843890,
      "question_id": 6,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 4 days",
      "timestamp": 1752515071,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1697843890/",
      "is_pending": "Not Pending",
      "title": "Zigzag Conversion",
      "memory": "14.3 MB",
      "code": "class Solution {\npublic:\n   string convert(string s, int numRows) {\n       if (numRows == 1) return s;\n       \n       vector<string> rows(min(numRows, int(s.size())));\n       int curRow = 0;\n       bool goingDown = false;\n       \n       for (char c : s) {\n           rows[curRow] += c;\n           if (curRow == 0 || curRow == numRows - 1) {\n               goingDown = !goingDown;\n           }\n           curRow += goingDown ? 1 : -1;\n       }\n       \n       string result;\n       for (string row : rows) {\n           result += row;\n       }\n       return result;\n   }\n};",
      "compare_result
      "title_slug": "zigzag-conversion",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 250,
      "_source": "rest"
    },
    {
      "id": 1696670686,
      "question_id": 102,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 5 days",
      "timestamp": 1752429065,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1696670686/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Level Order Traversal",
      "memory": "17 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        if (!root) return {};\n        \n        vector<vector<int>> result;\n        queue<TreeNode*> q;\n        q.push(root);\n        \n        while (!q.empty()) {\n            int size = q.size();\n            vector<int> level;\n            \n            for (int i = 0; i < size; i++) {\n                TreeNode* node = q.front();\n                q.pop();\n                level.push_back(node->val);\n                \n                if (node->left) q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n            \n            result.push_back(level);\n        }\n        \n        return result;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "binary-tree-level-order-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 249,
      "_source": "rest"
    },
    {
      "id": 1695506446,
      "question_id": 263,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 6 days",
      "timestamp": 1752342394,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1695506446/",
      "is_pending": "Not Pending",
      "title": "Ugly Number",
      "memory": "7.7 MB",
      "code": "class Solution {\npublic:\n   bool isUgly(int n) {\n       if (n <= 0) return false;\n       \n       while (n % 2 == 0) n /= 2;\n       while (n % 3 == 0) n /= 3;\n       while (n % 5 == 0) n /= 5;\n       \n       return n == 1;\n   }\n};",
      "compare_result
      "title_slug": "ugly-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 248,
      "_source": "rest"
    },
    {
      "id": 1694529786,
      "question_id": 118,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks",
      "timestamp": 1752255772,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1694529786/",
      "is_pending": "Not Pending",
      "title": "Pascal's Triangle",
      "memory": "9.7 MB",
      "code": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<vector<int>> triangle(numRows);\n        \n        for (int i = 0; i < numRows; i++) {\n            triangle[i].resize(i + 1);\n            triangle[i][0] = triangle[i][i] = 1;\n            \n            for (int j = 1; j < i; j++) {\n                triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];\n            }\n        }\n        \n        return triangle;\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "pascals-triangle",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 247,
      "_source": "rest"
    },
    {
      "id": 1693486003,
      "question_id": 13,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 1 day",
      "timestamp": 1752170782,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1693486003/",
      "is_pending": "Not Pending",
      "title": "Roman to Integer",
      "memory": "13.4 MB",
      "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map<char, int> roman = {\n            {'I', 1}, {'V', 5}, {'X', 10},\n            {'L', 50}, {'C', 100},\n            {'D', 500}, {'M', 1000}\n        };\n\n        int total = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (i + 1 < s.size() && roman[s[i]] < roman[s[i + 1]]) {\n                total -= roman[s[i]];\n            } else {\n                total += roman[s[i]];\n            }\n        }\n        return total;\n    }\n};\n",
      "compare_result
      "title_slug": "roman-to-integer",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 246,
      "_source": "rest"
    },
    {
      "id": 1689921091,
      "question_id": 66,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 4 days",
      "timestamp": 1751911815,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1689921091/",
      "is_pending": "Not Pending",
      "title": "Plus One",
      "memory": "11.6 MB",
      "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        for (int i = digits.size() - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i]++;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        \n        vector<int> result(digits.size() + 1, 0);\n        result[0] = 1;\n        return result;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "plus-one",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 245,
      "_source": "rest"
    },
    {
      "id": 1688751358,
      "question_id": 94,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 5 days",
      "timestamp": 1751826550,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1688751358/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Inorder Traversal",
      "memory": "10.8 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> result;\n        TreeNode* current = root;\n        \n        while (current != nullptr) {\n            if (current->left == nullptr) {\n                result.push_back(current->val);\n                current = current->right;\n            } else {\n                TreeNode* predecessor = current->left;\n                while (predecessor->right != nullptr && predecessor->right != current) {\n                    predecessor = predecessor->right;\n                }\n                if (predecessor->right == nullptr) {\n                    predecessor->right = current;\n                    current = current->left;\n                } else {\n                    predecessor->right = nullptr;\n                    result.push_back(current->val);\n                    current = current->right;\n                }\n            }\n        }\n        \n        return result;\n    }\n};\n",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "binary-tree-inorder-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 244,
      "_source": "rest"
    },
    {
      "id": 1686068983,
      "question_id": 2789,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626982,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "50 ms",
      "url": "/submissions/detail/1686068983/",
      "is_pending": "Not Pending",
      "title": "Counter II",
      "memory": "56.3 MB",
      "code": "/**\n * @param {integer} init\n * @return { increment: Function, decrement: Function, reset: Function }\n */\nvar createCounter = function(init) {\n    let temp = init;\n    return {\n        increment : () => {\n            return ++temp;\n        },\n        decrement : () => {\n            return --temp;\n        },\n        reset : () => {\n            temp = init;\n            return temp;\n        }\n    }\n};\n\n/**\n * const counter = createCounter(5)\n * counter.increment(); // 6\n * counter.reset(); // 5\n * counter.decrement(); // 4\n */",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "counter-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 243,
      "_source": "rest"
    },
    {
      "id": 1686065438,
      "question_id": 2732,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626725,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "29 ms",
      "url": "/submissions/detail/1686065438/",
      "is_pending": "Not Pending",
      "title": "Counter",
      "memory": "55 MB",
      "code": "/**\n * @param {number} n\n * @return {Function} counter\n */\nvar createCounter = function(n) {\n    \n    return function() {\n        return n++;\n    };\n};\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */",
      "compare_result": "11111111111111111111111",
      "title_slug": "counter",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 242,
      "_source": "rest"
    },
    {
      "id": 1686063963,
      "question_id": 2813,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626623,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "37 ms",
      "url": "/submissions/detail/1686063963/",
      "is_pending": "Not Pending",
      "title": "To Be Or Not To Be",
      "memory": "53.4 MB",
      "code": "/**\n * @param {string} val\n * @return {Object}\n */\nvar expect = function(val) {\n    return {\n        toBe : (val2) => {\n            if(val === val2) return true;\n            throw new Error(\"Not Equal\");\n        },\n        notToBe : (val3) => {\n            if(val !== val3) return true;\n            throw new Error(\"Equal\");\n        }\n    }\n};\n\n/**\n * expect(5).toBe(5); // true\n * expect(5).notToBe(5); // throws \"Equal\"\n */",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "to-be-or-not-to-be",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 241,
      "_source": "rest"
    },
    {
      "id": 1686063439,
      "question_id": 2813,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626589,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "40 ms",
      "url": "/submissions/detail/1686063439/",
      "is_pending": "Not Pending",
      "title": "To Be Or Not To Be",
      "memory": "53.2 MB",
      "code": "/**\n * @param {string} val\n * @return {Object}\n */\nvar expect = function(val) {\n    return {\n        toBe : function (val2){\n            if(val === val2) return true;\n            throw new Error(\"Not Equal\");\n        },\n        notToBe : function (val3){\n            if(val !== val3) return true;\n            throw new Error(\"Equal\");\n        }\n    }\n};\n\n/**\n * expect(5).toBe(5); // true\n * expect(5).notToBe(5); // throws \"Equal\"\n */",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "to-be-or-not-to-be",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 240,
      "_source": "rest"
    },
    {
      "id": 1686054740,
      "question_id": 2809,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751625994,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "48 ms",
      "url": "/submissions/detail/1686054740/",
      "is_pending": "Not Pending",
      "title": "Create Hello World Function",
      "memory": "52.8 MB",
      "code": "/**\n * @return {Function}\n */\nvar createHelloWorld = function() {\n    \n    return function(...args) {\n        return \"Hello World\";\n    }\n};\n\n/**\n * const f = createHelloWorld();\n * f(); // \"Hello World\"\n */",
      "compare_result": "1111111111111111111111111",
      "title_slug": "create-hello-world-function",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 239,
      "_source": "rest"
    },
    {
      "id": 1685363834,
      "question_id": 125,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 weeks, 1 day",
      "timestamp": 1751565883,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1685363834/",
      "is_pending": "Not Pending",
      "title": "Valid Palindrome",
      "memory": "9.8 MB",
      "code": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        int left = 0, right = s.size() - 1;\n        while (left < right) {\n            while (left < right && !isalnum(s[left])) left++;\n            while (left < right && !isalnum(s[right])) right--;\n            if (tolower(s[left]) != tolower(s[right])) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "valid-palindrome",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 238,
      "_source": "rest"
    },
    {
      "id": 1684218156,
      "question_id": 88,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751480521,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1684218156/",
      "is_pending": "Not Pending",
      "title": "Merge Sorted Array",
      "memory": "12.3 MB",
      "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int i = m - 1, j = n - 1, k = m + n - 1;\n        while (j >= 0) {\n            if (i >= 0 && nums1[i] > nums2[j]) {\n                nums1[k--] = nums1[i--];\n            } else {\n                nums1[k--] = nums2[j--];\n            }\n        }\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "title_slug": "merge-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 237,
      "_source": "rest"
    },
    {
      "id": 1684217275,
      "question_id": 88,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751480477,
      "status": 20,
      "status_display": "Compile Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1684217275/",
      "is_pending": "Not Pending",
      "title": "Merge Sorted Array",
      "memory": "N/A",
      "code": "#include <vector>\nusing namespace std;\n\nvoid merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1, j = n - 1, k = m + n - 1;\n    while (j >= 0) {\n        if (i >= 0 && nums1[i] > nums2[j]) {\n            nums1[k--] = nums1[i--];\n        } else {\n            nums1[k--] = nums2[j--];\n        }\n    }\n}",
      "compare_result": null,
      "title_slug": "merge-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 236,
      "_source": "rest"
    },
    {
      "id": 1681792491,
      "question_id": 58,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751306997,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1681792491/",
      "is_pending": "Not Pending",
      "title": "Length of Last Word",
      "memory": "8.8 MB",
      "code": "class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int i = s.length() - 1;\n        while (i >= 0 && s[i] == ' ') i--;\n        int length = 0;\n        while (i >= 0 && s[i] != ' ') {\n            length++;\n            i--;\n        }\n        return length;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "length-of-last-word",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 235,
      "_source": "rest"
    },
    {
      "id": 1680673837,
      "question_id": 54,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751221537,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1680673837/",
      "is_pending": "Not Pending",
      "title": "Spiral Matrix",
      "memory": "9.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) return {};\n        \n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> result;\n        \n        int top = 0, bottom = m - 1;\n        int left = 0, right = n - 1;\n        \n        while (top <= bottom && left <= right) {\n            for (int j = left; j <= right; j++) {\n                result.push_back(matrix[top][j]);\n            }\n            top++;\n            \n            for (int i = top; i <= bottom; i++) {\n                result.push_back(matrix[i][right]);\n            }\n            right--;\n            \n            if (top <= bottom) {\n                for (int j = right; j >= left; j--) {\n                    result.push_back(matrix[bottom][j]);\n                }\n                bottom--;\n            }\n            \n            if (left <= right) {\n                for (int i = bottom; i >= top; i--) {\n                    result.push_back(matrix[i][left]);\n                }\n                left++;\n            }\n        }\n        \n        return result;\n    }\n};",
      "compare_result": "11111111111111111111111111",
      "title_slug": "spiral-matrix",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 234,
      "_source": "rest"
    },
    {
      "id": 1679583994,
      "question_id": 79,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751134097,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "192 ms",
      "url": "/submissions/detail/1679583994/",
      "is_pending": "Not Pending",
      "title": "Word Search",
      "memory": "10.6 MB",
      "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        int m = board.size(), n = board[0].size();\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)\n                if(dfs(board, word, i, j, 0))\n                    return true;\n        return false;\n    }\n    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int d) {\n        if(d == word.size()) return true;\n        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j]!=word[d])\n            return false;\n        char c = board[i][j];\n        board[i][j] = '#';\n        bool found = dfs(board, word, i+1, j, d+1) ||\n                     dfs(board, word, i-1, j, d+1) ||\n                     dfs(board, word, i, j+1, d+1) ||\n                     dfs(board, word, i, j-1, d+1);\n        board[i][j] = c;\n        return found;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "word-search",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 233,
      "_source": "rest"
    },
    {
      "id": 1678587472,
      "question_id": 28,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751048004,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1678587472/",
      "is_pending": "Not Pending",
      "title": "Find the Index of the First Occurrence in a String",
      "memory": "8.8 MB",
      "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if (needle.empty()) return 0;\n        int n = haystack.size(), m = needle.size();\n        for (int i = 0; i <= n - m; ++i) {\n            if (haystack.substr(i, m) == needle)\n                return i;\n        }\n        return -1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 232,
      "_source": "rest"
    },
    {
      "id": 1678586751,
      "question_id": 28,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751047962,
      "status": 20,
      "status_display": "Compile Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1678586751/",
      "is_pending": "Not Pending",
      "title": "Find the Index of the First Occurrence in a String",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n    if (needle.empty()) return 0;\n    int n = haystack.size(), m = needle.size();\n    for (int i = 0; i <= n - m; ++i) {\n        if (haystack.substr(i, m) == needle)\n            return i;\n    }\n    return -1;\n}\n\nint main() {\n    string haystack, needle;\n    cin >> haystack >> needle;\n    cout << strStr(haystack, needle) << endl;\n    return 0;\n}",
      "compare_result": null,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 231,
      "_source": "rest"
    },
    {
      "id": 1677540350,
      "question_id": 12,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1750961067,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1677540350/",
      "is_pending": "Not Pending",
      "title": "Integer to Roman",
      "memory": "12.7 MB",
      "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n    vector<pair<int, string>> valueSymbols = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"},  {90, \"XC\"},  {50, \"L\"},  {40, \"XL\"},\n        {10, \"X\"},   {9, \"IX\"},   {5, \"V\"},   {4, \"IV\"}, {1, \"I\"}\n    };\n    string result;\n    for (const auto& [value, symbol] : valueSymbols) {\n        while (num >= value) {\n            result += symbol;\n            num -= value;\n        }\n    }\n    return result;\n}\n};",
      "compare_result
      "title_slug": "integer-to-roman",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 230,
      "_source": "rest"
    },
    {
      "id": 1676364307,
      "question_id": 5,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750874125,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1676364307/",
      "is_pending": "Not Pending",
      "title": "Longest Palindromic Substring",
      "memory": "9.2 MB",
      "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n    int n = s.size();\n    if (n < 2) return s;\n    int start = 0, maxLen = 1;\n    for (int i = 0; i < n;) {\n        if (n - i <= maxLen / 2) break;\n        int left = i, right = i;\n        while (right < n - 1 && s[right + 1] == s[right]) ++right;\n        i = right + 1;\n        while (left > 0 && right < n - 1 && s[left - 1] == s[right + 1]) {\n            --left;\n            ++right;\n        }\n        int len = right - left + 1;\n        if (len > maxLen) {\n            start = left;\n            maxLen = len;\n        }\n    }\n    return s.substr(start, maxLen);\n}\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "longest-palindromic-substring",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 229,
      "_source": "rest"
    },
    {
      "id": 1674064566,
      "question_id": 42,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750702839,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1674064566/",
      "is_pending": "Not Pending",
      "title": "Trapping Rain Water",
      "memory": "25.8 MB",
      "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        int left = 0, right = n - 1, leftMax = 0, rightMax = 0, res = 0;\n        while (left < right) {\n            if (height[left] < height[right]) {\n                if (height[left] >= leftMax)\n                    leftMax = height[left];\n                else\n                    res += leftMax - height[left];\n                left++;\n            } else {\n                if (height[right] >= rightMax)\n                    rightMax = height[right];\n                else\n                    res += rightMax - height[right];\n                right--;\n            }\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "trapping-rain-water",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 228,
      "_source": "rest"
    },
    {
      "id": 1672942901,
      "question_id": 155,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750615903,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1672942901/",
      "is_pending": "Not Pending",
      "title": "Min Stack",
      "memory": "23.5 MB",
      "code": "#include <stack>\nusing namespace std;\n\nclass MinStack {\n    stack<int> s, minS;\npublic:\n    MinStack() {}\n\n    void push(int val) {\n        s.push(val);\n        if (minS.empty() || val <= minS.top())\n            minS.push(val);\n    }\n\n    void pop() {\n        if (s.top() == minS.top())\n            minS.pop();\n        s.pop();\n    }\n\n    int top() {\n        return s.top();\n    }\n\n    int getMin() {\n        return minS.top();\n    }\n};",
      "compare_result": "1111111111111111111111111111111",
      "title_slug": "min-stack",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 227,
      "_source": "rest"
    },
    {
      "id": 1671882831,
      "question_id": 162,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750529995,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1671882831/",
      "is_pending": "Not Pending",
      "title": "Find Peak Element",
      "memory": "12.5 MB",
      "code": "class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int left = 0, right = nums.size() - 1;\n        while(left < right) {\n            int mid = left + (right - left) / 2;\n            if(nums[mid] > nums[mid + 1]) {\n                right = mid; // Peak is in the left half (including mid)\n            } else {\n                left = mid + 1; // Peak is in the right half\n            }\n        }\n        return left; // or right, since left == right\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "find-peak-element",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 226,
      "_source": "rest"
    },
    {
      "id": 1669157509,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319711,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "20 ms",
      "url": "/submissions/detail/1669157509/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "57.1 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        if(!head || !head->next) return nullptr;  // ✅ Edge case handling\n        \n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        prev->next = nullptr;  // ✅ Now guaranteed to be safe\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        if(!list1) return list2;  // ✅ Handle nulls gracefully\n        if(!list2) return list1;\n        \n        ListNode dummy(0);  // ✅ Stack allocation (minor improvement)\n        ListNode* temp = &dummy;\n\n        while(list1 && list2){\n            if(list1->val <= list2->val){\n                temp->next = list1;\n                list1 = list1->next;\n            }else{\n                temp->next = list2;\n                list2 = list2->next;\n            }\n            temp = temp->next;\n        }\n        \n        temp->next = list1 ? list1 : list2;  // ✅ More concise\n        return dummy.next;\n    }\n    \npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        if(!secondHalf) return head;  // ✅ Handle edge case\n        \n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 225,
      "_source": "rest"
    },
    {
      "id": 1669156715,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319660,
      "status": 14,
      "status_display": "Time Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/1669156715/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        if(!head || !head->next) return head;\n        \n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next;\n        }\n\n        if(prev){\n            prev->next = nullptr;\n        }\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n        ListNode* temp1 = list1;\n        ListNode* temp2 = list2;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111110000",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 224,
      "_source": "rest"
    },
    {
      "id": 1669155585,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319581,
      "status": 14,
      "status_display": "Time Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/1669155585/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next;\n        }\n\n        if(prev){\n            prev->next = nullptr;\n        }\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n        ListNode* temp1 = list1;\n        ListNode* temp2 = list2;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111110000",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 223,
      "_source": "rest"
    },
    {
      "id": 1669152955,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319397,
      "status": 14,
      "status_display": "Time Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/1669152955/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next;\n        }\n        prev->next = nullptr;\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n        ListNode* temp1 = list1;\n        ListNode* temp2 = list2;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111110000",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 222,
      "_source": "rest"
    },
    {
      "id": 1669151336,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319283,
      "status": 14,
      "status_display": "Time Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/1669151336/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next;\n        }\n        prev->next = nullptr;\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n        ListNode* temp1 = list1;\n        ListNode* temp2 = list2;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111110000",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 221,
      "_source": "rest"
    },
    {
      "id": 1669099839,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750316081,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "49 ms",
      "url": "/submissions/detail/1669099839/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "75.9 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next && fast->next->next){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        ListNode* list1 = head;\n        ListNode* list2 = slow->next;\n        slow->next = nullptr;\n\n        ListNode* temp1 = sortList(list1);\n        ListNode* temp2 = sortList(list2);\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp = temp->next;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp = temp->next;\n                temp2 = temp2->next;\n            }\n        }\n\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 220,
      "_source": "rest"
    },
    {
      "id": 1669099627,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750316069,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "57 ms",
      "url": "/submissions/detail/1669099627/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "75.6 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next && fast->next->next){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        ListNode* list1 = head;\n        ListNode* list2 = slow->next;\n        slow->next = nullptr;\n\n        ListNode* temp1 = sortList(list1);\n        ListNode* temp2 = sortList(list2);\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp = temp->next;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp = temp->next;\n                temp2 = temp2->next;\n            }\n        }\n\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 219,
      "_source": "rest"
    },
    {
      "id": 1668984986,
      "question_id": 21,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750309456,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1668984986/",
      "is_pending": "Not Pending",
      "title": "Merge Two Sorted Lists",
      "memory": "19.6 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n        ListNode* temp1 = list1;\n        ListNode* temp2 = list2;\n\n        while(temp1 && temp2){\n            if(temp1->val <= temp2->val){\n                temp->next = temp1;\n                temp = temp->next;\n                temp1 = temp1->next;\n            }else{\n                temp->next = temp2;\n                temp = temp->next;\n                temp2 = temp2->next;\n            }\n        }\n\n        if(temp1){\n            temp->next = temp1;\n        }\n        if(temp2){\n            temp->next = temp2;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "merge-two-sorted-lists",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 218,
      "_source": "rest"
    },
    {
      "id": 1668275921,
      "question_id": 160,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750250045,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "33 ms",
      "url": "/submissions/detail/1668275921/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Linked Lists",
      "memory": "18.6 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if(!headA || !headB){\n            return nullptr;\n        }\n\n        ListNode* temp1 = headA;\n        ListNode* temp2 = headB;\n\n        while(temp1 != temp2){\n            temp1 = temp1->next;\n            temp2 = temp2->next;\n\n            if(temp1 == nullptr && temp2 != nullptr){\n                temp1 = headB;\n            }\n            if(temp2 == nullptr && temp1 != nullptr){\n                temp2 = headA;\n            }\n        }\n        return temp1;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-linked-lists",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 217,
      "_source": "rest"
    },
    {
      "id": 1668259693,
      "question_id": 160,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750248815,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "34 ms",
      "url": "/submissions/detail/1668259693/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Linked Lists",
      "memory": "18.5 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* temp1 = headA;\n        ListNode* temp2 = headB;\n        int len1 = 0;\n        int len2 = 0;\n\n        while(temp1){\n            len1++;\n            temp1 = temp1->next;\n        }\n        while(temp2){\n            len2++;\n            temp2 = temp2->next;\n        }\n\n        temp1 = headA;\n        temp2 = headB;\n\n        if(len1 > len2){\n            int diff = len1 - len2;\n            while(diff){\n                temp1 = temp1->next;\n                diff--;\n            }\n        }else{\n            int diff = len2 - len1;\n            while(diff){\n                temp2 = temp2->next;\n                diff--;\n            }\n        }\n\n        while(temp1 && temp2){\n            if(temp1 == temp2){\n                return temp1;\n            }\n            temp1 = temp1->next;\n            temp2 = temp2->next;\n        }\n        return nullptr;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-linked-lists",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 216,
      "_source": "rest"
    },
    {
      "id": 1667728079,
      "question_id": 2,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750211280,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667728079/",
      "is_pending": "Not Pending",
      "title": "Add Two Numbers",
      "memory": "77.2 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // stack<int> st;\n\n        ListNode* i = l1;\n        ListNode* j = l2;\n        int sum = 0;\n        int carry = 0;\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n\n        while(i || j || carry){\n            sum =  carry;\n            if(i){\n                sum += i->val;\n                i = i->next;\n            }\n            if(j){\n                sum += j->val;\n                j = j->next;\n            }\n\n            int rem = sum % 10;\n            carry = sum / 10;\n\n            ListNode* newNode = new ListNode(rem);\n            temp->next = newNode;\n            temp = temp->next;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result
      "title_slug": "add-two-numbers",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 215,
      "_source": "rest"
    },
    {
      "id": 1667728024,
      "question_id": 2,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750211273,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1667728024/",
      "is_pending": "Not Pending",
      "title": "Add Two Numbers",
      "memory": "77.1 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // stack<int> st;\n\n        ListNode* i = l1;\n        ListNode* j = l2;\n        int sum = 0;\n        int carry = 0;\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n\n        while(i || j || carry){\n            sum =  carry;\n            if(i){\n                sum += i->val;\n                i = i->next;\n            }\n            if(j){\n                sum += j->val;\n                j = j->next;\n            }\n\n            int rem = sum % 10;\n            carry = sum / 10;\n\n            ListNode* newNode = new ListNode(rem);\n            temp->next = newNode;\n            temp = temp->next;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result
      "title_slug": "add-two-numbers",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 214,
      "_source": "rest"
    },
    {
      "id": 1667724674,
      "question_id": 2,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750210846,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1667724674/",
      "is_pending": "Not Pending",
      "title": "Add Two Numbers",
      "memory": "77.1 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // stack<int> st;\n\n        ListNode* i = l1;\n        ListNode* j = l2;\n        int sum = 0;\n        int carry = 0;\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* temp = dummy;\n\n        while(i || j || carry){\n            sum =  carry;\n            if(i){\n                sum += i->val;\n                i = i->next;\n            }\n            if(j){\n                sum += j->val;\n                j = j->next;\n            }\n\n            int rem = sum % 10;\n            carry = sum / 10;\n\n            ListNode* newNode = new ListNode(rem);\n            temp->next = newNode;\n            temp = temp->next;\n        }\n        return dummy->next;\n    }\n};",
      "compare_result
      "title_slug": "add-two-numbers",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 213,
      "_source": "rest"
    },
    {
      "id": 1667705812,
      "question_id": 2216,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750208195,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667705812/",
      "is_pending": "Not Pending",
      "title": "Delete the Middle Node of a Linked List",
      "memory": "312.1 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        if(!head || !head->next){\n            // delete head;\n            return nullptr;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev->next = slow->next;\n        delete slow;\n        return head;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "delete-the-middle-node-of-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 212,
      "_source": "rest"
    },
    {
      "id": 1667704664,
      "question_id": 2216,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750208021,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1667704664/",
      "is_pending": "Not Pending",
      "title": "Delete the Middle Node of a Linked List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        if(!head || !head->next){\n            delete head;\n            return nullptr;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev->next = slow->next;\n        delete slow;\n        return head;\n    }\n};",
      "compare_result": "1110000000000000000000000000000000000000000000000000000000000000000000",
      "title_slug": "delete-the-middle-node-of-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 211,
      "_source": "rest"
    },
    {
      "id": 1667697405,
      "question_id": 2216,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750206935,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667697405/",
      "is_pending": "Not Pending",
      "title": "Delete the Middle Node of a Linked List",
      "memory": "312.2 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        if(!head || !head->next){\n            return nullptr;\n        }\n\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next->next && fast->next->next->next){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        ListNode* nodeToDelete = slow->next;\n        slow->next = slow->next->next;\n        delete nodeToDelete;\n        return head;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "delete-the-middle-node-of-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 210,
      "_source": "rest"
    },
    {
      "id": 1667690348,
      "question_id": 19,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750205815,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667690348/",
      "is_pending": "Not Pending",
      "title": "Remove Nth Node From End of List",
      "memory": "14.8 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0);\n        dummy->next = head;\n\n        ListNode* slow = dummy;\n        ListNode* fast = dummy;\n\n        for(int i = 0; i <= n; i++){\n            fast = fast->next;\n        }\n\n        while(fast != NULL){\n            slow = slow->next;\n            fast = fast->next;\n        }\n\n        ListNode* nodeToDelete = slow->next;\n        slow->next = slow->next->next;\n        delete nodeToDelete;\n        \n        ListNode* result = dummy->next;\n        delete dummy;\n        return result;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-nth-node-from-end-of-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 209,
      "_source": "rest"
    },
    {
      "id": 1667690289,
      "question_id": 19,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750205805,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "2 ms",
      "url": "/submissions/detail/1667690289/",
      "is_pending": "Not Pending",
      "title": "Remove Nth Node From End of List",
      "memory": "14.9 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0);\n        dummy->next = head;\n\n        ListNode* slow = dummy;\n        ListNode* fast = dummy;\n\n        for(int i = 0; i <= n; i++){\n            fast = fast->next;\n        }\n\n        while(fast != NULL){\n            slow = slow->next;\n            fast = fast->next;\n        }\n\n        ListNode* nodeToDelete = slow->next;\n        slow->next = slow->next->next;\n        delete nodeToDelete;\n        \n        ListNode* result = dummy->next;\n        delete dummy;\n        return result;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-nth-node-from-end-of-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 208,
      "_source": "rest"
    },
    {
      "id": 1667682047,
      "question_id": 19,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750204480,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667682047/",
      "is_pending": "Not Pending",
      "title": "Remove Nth Node From End of List",
      "memory": "15 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if(!head){\n            return NULL;\n        }\n\n        int len = 0;\n        ListNode* curr = head;\n\n        while(curr != NULL){\n            len++;\n            curr = curr->next;\n        }\n\n        ListNode* nodeToDelete = NULL;\n        if(len - n == 0){\n            nodeToDelete = head;\n            head = head->next;\n            delete nodeToDelete;\n            return head;\n        }\n\n        int cnt = 1;\n        curr = head;\n        while(cnt != len - n){\n            cnt++;\n            curr = curr->next;\n        }\n\n        nodeToDelete = curr->next;\n        curr->next = curr->next->next;\n        delete nodeToDelete;\n        return head;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-nth-node-from-end-of-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 207,
      "_source": "rest"
    },
    {
      "id": 1667679680,
      "question_id": 19,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750204090,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1667679680/",
      "is_pending": "Not Pending",
      "title": "Remove Nth Node From End of List",
      "memory": "N/A",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if(!head){\n            return NULL;\n        }\n\n        int len = 0;\n        ListNode* curr = head;\n\n        while(curr != NULL){\n            len++;\n            curr = curr->next;\n        }\n\n        if(len == 1 && n == 1){\n            delete head;\n            return NULL;\n        }\n\n        int cnt = 1;\n        curr = head;\n        while(cnt != len - n){\n            cnt++;\n            curr = curr->next;\n        }\n\n        ListNode* nodeToDelete = curr->next;\n        curr->next = curr->next->next;\n        delete nodeToDelete;\n        return head;\n    }\n};",
      "compare_result": "1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "title_slug": "remove-nth-node-from-end-of-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 206,
      "_source": "rest"
    },
    {
      "id": 1667672857,
      "question_id": 328,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750202930,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667672857/",
      "is_pending": "Not Pending",
      "title": "Odd Even Linked List",
      "memory": "15.6 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        if(!head || !head->next || !head->next->next){\n            return head;\n        }\n\n        ListNode* oddIdx = head;\n        ListNode* evenIdx = head->next;\n        ListNode* evenStart = evenIdx;\n\n        ListNode* temp = evenIdx->next;\n\n        bool oddFlag = true;\n        while(temp != NULL){\n            if(oddFlag){\n                oddIdx->next = temp;\n                oddIdx = oddIdx->next;\n                temp = temp->next;\n                oddFlag = false;\n            }else{\n                evenIdx->next = temp;\n                evenIdx = evenIdx->next;\n                temp = temp->next;\n                oddFlag = true;\n            }\n        }\n        evenIdx->next = nullptr;\n        oddIdx->next = evenStart;\n        return head;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "odd-even-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 205,
      "_source": "rest"
    },
    {
      "id": 1667652164,
      "question_id": 234,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750199520,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667652164/",
      "is_pending": "Not Pending",
      "title": "Palindrome Linked List",
      "memory": "118.8 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    ListNode *reverse(ListNode* node){\n        ListNode* prev = NULL;\n        ListNode* curr = node;\n        ListNode* nextNode = NULL;\n\n        while(curr != NULL){\n            nextNode = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextNode;\n        }\n        return prev;\n    }\npublic:\n    bool isPalindrome(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next != NULL && fast->next->next != NULL){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode* reverseHead = reverse(slow->next);\n        ListNode* temp = head;\n        ListNode* reverseTemp = reverseHead;\n\n        while(reverseTemp != NULL){\n            if(temp->val != reverseTemp->val){\n                return false;\n            }\n            temp = temp->next;\n            reverseTemp = reverseTemp->next;\n        }\n\n        slow->next = reverse(reverseHead);\n        return true;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "palindrome-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 204,
      "_source": "rest"
    },
    {
      "id": 1667643880,
      "question_id": 234,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750198269,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "16 ms",
      "url": "/submissions/detail/1667643880/",
      "is_pending": "Not Pending",
      "title": "Palindrome Linked List",
      "memory": "127.3 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        stack<int> st;\n        ListNode* temp = head;\n\n        while(temp != NULL){\n            st.push(temp->val);\n            temp = temp->next;\n        }\n        \n        temp = head;\n        while(temp != NULL){\n            if(temp->val != st.top()){\n                return false;\n            }\n            st.pop();\n            temp = temp->next;\n        }  \n        return true;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "palindrome-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 203,
      "_source": "rest"
    },
    {
      "id": 1667641598,
      "question_id": 142,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750197932,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "6 ms",
      "url": "/submissions/detail/1667641598/",
      "is_pending": "Not Pending",
      "title": "Linked List Cycle II",
      "memory": "11.2 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast != NULL && fast->next != NULL){\n            slow = slow->next;\n            fast = fast->next->next;\n\n            if(slow == fast){\n                slow = head;\n\n                while(slow != fast){\n                    slow = slow->next;\n                    fast = fast->next;\n                }\n\n                return slow;\n            }\n        }\n        return NULL;\n    }\n};",
      "compare_result": "111111111111111111",
      "title_slug": "linked-list-cycle-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 202,
      "_source": "rest"
    },
    {
      "id": 1667631570,
      "question_id": 141,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750196560,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "8 ms",
      "url": "/submissions/detail/1667631570/",
      "is_pending": "Not Pending",
      "title": "Linked List Cycle",
      "memory": "11.8 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast != NULL && fast->next != NULL){\n            slow = slow->next;\n            fast = fast->next->next;\n\n            if(slow == fast){\n                return true;\n            }\n        }\n\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "linked-list-cycle",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 201,
      "_source": "rest"
    },
    {
      "id": 1667631504,
      "question_id": 141,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750196552,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "12 ms",
      "url": "/submissions/detail/1667631504/",
      "is_pending": "Not Pending",
      "title": "Linked List Cycle",
      "memory": "11.7 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast != NULL && fast->next != NULL){\n            slow = slow->next;\n            fast = fast->next->next;\n\n            if(slow == fast){\n                return true;\n            }\n        }\n\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "linked-list-cycle",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 200,
      "_source": "rest"
    },
    {
      "id": 1667630454,
      "question_id": 206,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750196402,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667630454/",
      "is_pending": "Not Pending",
      "title": "Reverse Linked List",
      "memory": "13.4 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* nextNode = NULL;\n        ListNode* curr = head;\n\n        while(curr != NULL){\n            nextNode = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextNode;\n        }\n        return prev;\n    }\n};",
      "compare_result": "1111111111111111111111111111",
      "title_slug": "reverse-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 199,
      "_source": "rest"
    },
    {
      "id": 1667612043,
      "question_id": 908,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750194072,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667612043/",
      "is_pending": "Not Pending",
      "title": "Middle of the Linked List",
      "memory": "10 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast != NULL && fast->next != NULL){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "middle-of-the-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 198,
      "_source": "rest"
    },
    {
      "id": 1667608902,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193706,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667608902/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.4 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        node->val = node->next->val;\n\n        ListNode* nodeToDelete = node->next;\n        node->next = node->next->next;\n\n        delete(nodeToDelete);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 197,
      "_source": "rest"
    },
    {
      "id": 1667608389,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193647,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667608389/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.4 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        node->val = node->next->val;\n\n        ListNode* nextNext = node->next->next;\n        node->next = nextNext;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 196,
      "_source": "rest"
    },
    {
      "id": 1667608005,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193603,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667608005/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.3 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        node->val = node->next->val;\n\n        ListNode* nextNext = node->next->next;\n        node->next = nextNext;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 195,
      "_source": "rest"
    },
    {
      "id": 1667604163,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193163,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667604163/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.3 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode* temp = node;\n        temp->val = temp->next->val;\n\n        while(temp->next->next != NULL){\n            temp = temp->next;\n            temp->val = temp->next->val;\n        }\n\n        temp->next = NULL;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 194,
      "_source": "rest"
    },
    {
      "id": 1667604070,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193153,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667604070/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.3 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode* temp = node;\n        temp->val = temp->next->val;\n\n        while(temp->next->next != NULL){\n            temp = temp->next;\n            temp->val = temp->next->val;\n        }\n\n        temp->next = NULL;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 193,
      "_source": "rest"
    },
    {
      "id": 1667603999,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193146,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1667603999/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.4 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode* temp = node;\n        temp->val = temp->next->val;\n\n        while(temp->next->next != NULL){\n            temp = temp->next;\n            temp->val = temp->next->val;\n        }\n\n        temp->next = NULL;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 192,
      "_source": "rest"
    },
    {
      "id": 1667603906,
      "question_id": 237,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750193136,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "5 ms",
      "url": "/submissions/detail/1667603906/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a Linked List",
      "memory": "12.4 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode* temp = node;\n        temp->val = temp->next->val;\n\n        while(temp->next->next != NULL){\n            temp = temp->next;\n            temp->val = temp->next->val;\n        }\n\n        temp->next = NULL;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-linked-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 191,
      "_source": "rest"
    },
    {
      "id": 1667570567,
      "question_id": 27,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750189846,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667570567/",
      "is_pending": "Not Pending",
      "title": "Remove Element",
      "memory": "11.7 MB",
      "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int len = nums.size();\n        int left = 0;\n        int right = len - 1;\n\n        while(left <= right){\n            if(nums[left] != val){\n                left++;\n                continue;\n            }\n\n            while(right >= left && nums[right] == val){\n                right--;\n            }\n\n            if(right < left){\n                return left;\n            }else{\n                nums[left++] = nums[right--];\n            }\n        }\n        return left;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-element",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 190,
      "_source": "rest"
    },
    {
      "id": 1667569588,
      "question_id": 27,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750189765,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667569588/",
      "is_pending": "Not Pending",
      "title": "Remove Element",
      "memory": "11.7 MB",
      "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int len = nums.size();\n        int left = 0;\n        int right = len - 1;\n\n        while(left <= right){\n            if(nums[left] != val){\n                left++;\n                continue;\n            }\n\n            while(right >= left && nums[right] == val){\n                right--;\n            }\n\n            if(right < left){\n                return left;\n            }else{\n                nums[left++] = nums[right--];\n            }\n        }\n        return left;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-element",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 189,
      "_source": "rest"
    },
    {
      "id": 1667556428,
      "question_id": 27,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750188690,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1667556428/",
      "is_pending": "Not Pending",
      "title": "Remove Element",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int len = nums.size();\n        int left = 0;\n        int right = len - 1;\n\n        while(left <= right){\n            if(nums[left] != val){\n                left++;\n                continue;\n            }\n\n            while(right >= left && nums[right] == val){\n                right--;\n            }\n\n            nums[left++] = nums[right--];\n        }\n        return left;\n    }\n};",
      "compare_result": "1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "title_slug": "remove-element",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 188,
      "_source": "rest"
    },
    {
      "id": 1667435649,
      "question_id": 67,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750181470,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1667435649/",
      "is_pending": "Not Pending",
      "title": "Add Binary",
      "memory": "10.2 MB",
      "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int i = a.size() - 1;\n        int j = b.size() - 1;\n        string res = \"\";\n        int carry = 0;\n\n        while(i >= 0 || j >= 0 || carry){\n            int sum = 0;\n            sum += carry;\n            if(i >= 0) sum += a[i--] - '0';\n            if(j >= 0) sum += b[j--] - '0';\n\n            if(sum == 0 || sum == 1){\n                res += to_string(sum);\n                carry = 0;\n            }else if(sum == 2){\n                res += \"0\";\n                carry = 1;\n            }else if(sum == 3){\n                res += \"1\";\n                carry = 1;\n            }\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "add-binary",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 187,
      "_source": "rest"
    },
    {
      "id": 1667433461,
      "question_id": 67,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750181364,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1667433461/",
      "is_pending": "Not Pending",
      "title": "Add Binary",
      "memory": "10 MB",
      "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int i = a.size() - 1;\n        int j = b.size() - 1;\n        string res = \"\";\n        int carry = 0;\n\n        while(i >= 0 || j >= 0 || carry){\n            int sum = 0;\n            sum += carry;\n            if(i >= 0) sum += a[i--] - '0';\n            if(j >= 0) sum += b[j--] - '0';\n\n            if(sum == 0 || sum == 1){\n                res += to_string(sum);\n                carry = 0;\n            }else if(sum == 2){\n                res += \"0\";\n                carry = 1;\n            }else if(sum == 3){\n                res += \"1\";\n                carry = 1;\n            }\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "add-binary",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 186,
      "_source": "rest"
    },
    {
      "id": 1667428846,
      "question_id": 67,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750181127,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1667428846/",
      "is_pending": "Not Pending",
      "title": "Add Binary",
      "memory": "12.3 MB",
      "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int i = a.size() - 1;\n        int j = b.size() - 1;\n        string res = \"\";\n        int carry = 0;\n\n        while(i >= 0 || j >= 0 || carry){\n            int sum = 0;\n            sum += carry;\n            if(i >= 0) sum += a[i--] - '0';\n            if(j >= 0) sum += b[j--] - '0';\n\n            if(sum == 0 || sum == 1){\n                res = to_string(sum) + res;\n                carry = 0;\n            }else if(sum == 2){\n                res = \"0\" + res;\n                carry = 1;\n            }else if(sum == 3){\n                res = \"1\" + res;\n                carry = 1;\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "add-binary",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 185,
      "_source": "rest"
    },
    {
      "id": 1666552607,
      "question_id": 2227,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750115663,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "20 ms",
      "url": "/submissions/detail/1666552607/",
      "is_pending": "Not Pending",
      "title": "Sum of Subarray Ranges",
      "memory": "13.9 MB",
      "code": "class Solution {\npublic:\n    long long subArrayRanges(vector<int>& nums) {\n        int length = nums.size();\n        int rangeMin = INT_MAX;\n        int rangeMax = INT_MIN;\n        long long sum = 0;\n\n        for(int i = 0; i < length; i++){\n            rangeMin = nums[i];\n            rangeMax = nums[i];\n\n            for(int j = i + 1; j < length; j++){\n                rangeMin = min(rangeMin, nums[j]);\n                rangeMax = max(rangeMax, nums[j]);\n                sum += rangeMax - rangeMin;\n            }\n        }\n        return sum;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "sum-of-subarray-ranges",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 184,
      "_source": "rest"
    },
    {
      "id": 1666548194,
      "question_id": 402,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750114944,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1666548194/",
      "is_pending": "Not Pending",
      "title": "Remove K Digits",
      "memory": "11 MB",
      "code": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        string result = \"\";\n        int cnt = k;\n\n        for(char digit: num){\n            while(!result.empty() && digit < result.back() && cnt > 0){\n                result.pop_back();\n                cnt--;\n            }\n            result.push_back(digit);\n        }\n\n        while(cnt > 0 && !result.empty()){\n            result.pop_back();\n            cnt--;\n        }\n\n        int start = 0;\n        while(start < result.length() && result[start] == '0'){\n            start++;\n        }\n\n        return start == result.length() ? \"0\" : result.substr(start);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111",
      "title_slug": "remove-k-digits",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 183,
      "_source": "rest"
    },
    {
      "id": 1666548124,
      "question_id": 402,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750114932,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "4 ms",
      "url": "/submissions/detail/1666548124/",
      "is_pending": "Not Pending",
      "title": "Remove K Digits",
      "memory": "11 MB",
      "code": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        string result = \"\";\n        int cnt = k;\n\n        for(char digit: num){\n            while(!result.empty() && digit < result.back() && cnt > 0){\n                result.pop_back();\n                cnt--;\n            }\n            result.push_back(digit);\n        }\n\n        while(cnt > 0 && !result.empty()){\n            result.pop_back();\n            cnt--;\n        }\n\n        int start = 0;\n        while(start < result.length() && result[start] == '0'){\n            start++;\n        }\n\n        return start == result.length() ? \"0\" : result.substr(start);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111",
      "title_slug": "remove-k-digits",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 182,
      "_source": "rest"
    },
    {
      "id": 1666538264,
      "question_id": 402,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750113376,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1666538264/",
      "is_pending": "Not Pending",
      "title": "Remove K Digits",
      "memory": "14.1 MB",
      "code": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        int len = num.size();\n        stack<int> st;\n        int cnt = k;\n\n        for(int i = 0; i < len; i++){\n            int currDigit = num[i] - '0';\n            while(!st.empty() && currDigit < st.top() && cnt != 0){\n                st.pop();\n                cnt--;\n            }\n            st.push(currDigit);\n        }\n\n        while(cnt != 0 && !st.empty()){\n            st.pop();\n            cnt--;\n        }\n\n        string res;\n\n        while(!st.empty()){\n            res += to_string(st.top());\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n\n        int start = 0;\n        while(start < res.length() && res[start] == '0'){\n            start++;\n        }\n\n        if(start == res.length()){\n            return \"0\";\n        }\n        return res.substr(start);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111",
      "title_slug": "remove-k-digits",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 181,
      "_source": "rest"
    },
    {
      "id": 1666511400,
      "question_id": 50,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750109600,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1666511400/",
      "is_pending": "Not Pending",
      "title": "Pow(x, n)",
      "memory": "8.4 MB",
      "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        if(n == 0) return 1.0;\n        if(n == 1) return x;\n        if(n == -1) return 1.0 / x;\n        \n        long long absN = abs((long long)n);  \n        double ans;\n        \n        if(absN % 2 == 0){\n            ans = myPow(x * x, absN / 2);\n        } else {\n            ans = x * myPow(x * x, (absN - 1) / 2);\n        }\n        \n        return (n > 0) ? ans : 1.0 / ans;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "powx-n",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 180,
      "_source": "rest"
    },
    {
      "id": 1666505443,
      "question_id": 50,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750108858,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1666505443/",
      "is_pending": "Not Pending",
      "title": "Pow(x, n)",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        double ans;\n        if(n == 1){\n            ans = x;\n        }else if(n == 0){\n            ans = 1;\n        }else if(n % 2 == 0){\n            ans =  myPow(x * x, abs(n)/2);\n        }else{\n            ans = x * myPow(x * x, (abs(n) - 1) / 2);\n        }\n\n        if(n >= 0){\n            return ans;\n        }else{\n            return 1 / ans;\n        }\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000",
      "title_slug": "powx-n",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 179,
      "_source": "rest"
    },
    {
      "id": 1665541942,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750046255,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1665541942/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "21.9 MB",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            bool destroyed = false;\n            while(!st.empty() && st.top() > 0 && asteroids[i] < 0){\n                int diff = asteroids[i] + st.top();\n                if(diff > 0){\n                    destroyed = true;\n                    break;\n                }else if(diff < 0){\n                    st.pop();\n                    continue;\n                }else{\n                    st.pop();\n                    destroyed = true;\n                    break;\n                }\n            }\n            if(!destroyed ){\n                st.push(asteroids[i]);\n            }\n        }\n        vector<int> res;\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 178,
      "_source": "rest"
    },
    {
      "id": 1665459146,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750037592,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1665459146/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "22.4 MB",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( st.top() >= 0 && asteroids[i] < 0 ){\n                int lastTop;\n                bool bothDestroyed = false;\n                while( !st.empty() && (st.top() >= 0 && asteroids[i] < 0 )\n                    && ( abs(asteroids[i]) >= abs( st.top() ) ))\n                {\n                    if(abs(st.top()) == abs(asteroids[i])){\n                        bothDestroyed = true;\n                    }\n                    lastTop = abs(st.top());\n                    st.pop();\n                    if(bothDestroyed){\n                        break;\n                    }\n                }\n\n                if(!bothDestroyed){\n                    if (!st.empty() && st.top() > 0 && abs(asteroids[i]) < abs(st.top())) {\n\n                    }else{\n                        st.push(asteroids[i]);\n                    }\n                }\n            }else{\n                st.push(asteroids[i]);\n            }\n        }\n        vector<int> res;\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 177,
      "_source": "rest"
    },
    {
      "id": 1665455263,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750037073,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665455263/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( st.top() >= 0 && asteroids[i] < 0 ){\n                int lastTop;\n                bool bothDestroyed = false;\n                while( !st.empty() && (st.top() >= 0 && asteroids[i] < 0 )\n                    && ( abs(asteroids[i]) >= abs( st.top() ) ))\n                {\n                    if(abs(st.top()) == abs(asteroids[i])) bothDestroyed = true;\n                    lastTop = abs(st.top());\n                    st.pop();\n                }\n\n                if(st.empty() || (!st.empty() && !bothDestroyed)){\n                    st.push(asteroids[i]);\n                }\n            }else{\n                st.push(asteroids[i]);\n            }\n        }\n        vector<int> res;\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "00011111111111111011111111111111101111111111101100111111000011110011111111111111101111111111111110111111111110110011111100001111001111111111111110110000000000000000111100001011001100000000011100110000000000000000000000000000000000000011001100110000000001110011001000000000000",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 176,
      "_source": "rest"
    },
    {
      "id": 1665453378,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750036821,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665453378/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( st.top() >= 0 && asteroids[i] < 0 ){\n                int lastTop;\n                bool bothDestroyed = false;\n                while( !st.empty() && (st.top() >= 0 && asteroids[i] < 0 )\n                    && ( abs(asteroids[i]) >= abs( st.top() ) ))\n                {\n                    if(abs(st.top()) == abs(asteroids[i])) bothDestroyed = true;\n                    lastTop = abs(st.top());\n                    st.pop();\n                }\n\n                if(st.empty() && !bothDestroyed){\n                    st.push(asteroids[i]);\n                }\n            }else{\n                st.push(asteroids[i]);\n            }\n        }\n        vector<int> res;\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111101111111111111110111111100001111001101111111111111110111111111110111111111111111011111110000111100110111111111111111011111111111011111111111111111111111111110001011011110000111011101111111111111111111111111111111011111111111101101110000011101110111100110000000000",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 175,
      "_source": "rest"
    },
    {
      "id": 1665451521,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750036564,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665451521/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( st.top() >= 0 && asteroids[i] < 0 ){\n                int lastTop;\n                while( !st.empty() && (st.top() >= 0 && asteroids[i] < 0 )\n                    && ( abs(asteroids[i]) >= abs( st.top() ) ))\n                {\n                    lastTop = abs(st.top());\n                    st.pop();\n                }\n\n                if((st.empty() && abs(asteroids[i]) != lastTop) || (!st.empty() && st.top() <0 && asteroids[i] < 0)){\n                    st.push(asteroids[i]);\n                }\n            }else{\n                st.push(asteroids[i]);\n            }\n        }\n        vector<int> res;\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111110110111111111111011011111110000101101110000011101110111111111111011011111111111101101111111000010110111000001110111011111111111101101111111111111111111111110001011011100000111011101111111111111111111111111111111011111111111101101110000011101110111100111011100000",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 174,
      "_source": "rest"
    },
    {
      "id": 1665426669,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750032859,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665426669/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( (st.top() >= 0 && asteroids[i] >= 0 )\n                    || (st.top() < 0 && asteroids[i] < 0)\n                    || (st.top() < 0 && asteroids[i] >= 0))\n            {\n                st.push(asteroids[i]);\n            }else{\n                int lastTop;\n                while(!st.empty() && abs(asteroids[i]) >= abs(st.top())){\n                    lastTop = abs( st.top() );\n                    st.pop();\n                }\n                if(st.empty() && abs(asteroids[i]) != lastTop){\n                    st.push(asteroids[i]);\n                }\n            }\n        }\n\n        vector<int> res;\n\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111101110111111111110011011100001111001101110000011101110111111111110111011111111111001101110000000000110111000001110111011111111111011101111111111111111111111110001011011100000111011101111111111111111111111111111111011111111111101101110000011101110111100110000000000",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 173,
      "_source": "rest"
    },
    {
      "id": 1665423809,
      "question_id": 735,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750032447,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665423809/",
      "is_pending": "Not Pending",
      "title": "Asteroid Collision",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        int len = asteroids.size();\n        stack<int> st;\n\n        for(int i = 0; i < len; i++){\n            if(st.empty()){\n                st.push(asteroids[i]);\n            }else if( (st.top() >= 0 && asteroids[i] >= 0 )\n                    || (st.top() < 0 && asteroids[i] < 0))\n            {\n                st.push(asteroids[i]);\n            }else{\n                int lastTop;\n                while(!st.empty() && abs(asteroids[i]) >= abs(st.top())){\n                    lastTop = abs( st.top() );\n                    st.pop();\n                }\n                if(st.empty() && abs(asteroids[i]) != lastTop){\n                    st.push(asteroids[i]);\n                }\n            }\n        }\n\n        vector<int> res;\n\n        while(!st.empty()){\n            int temp = st.top();\n            res.push_back(temp);\n            st.pop();\n        }\n\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11101100110010000000110011000100000011000000100000001100000010000000110011001000000011001100000000000000110000000000000000000000000011001100100010001100110011111111110010001011011100000111011101111100110011111111111111111111011111111111101101110000011101110111100100000000000",
      "title_slug": "asteroid-collision",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 172,
      "_source": "rest"
    },
    {
      "id": 1665396937,
      "question_id": 943,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750028008,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "27 ms",
      "url": "/submissions/detail/1665396937/",
      "is_pending": "Not Pending",
      "title": "Sum of Subarray Minimums",
      "memory": "48.1 MB",
      "code": "class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        int len = arr.size();\n        long long sum = 0;\n        const int MOD = 1e9 + 7;\n        stack<pair<int,int>> st;\n        vector<int> NseIdx(len, len);\n        vector<int> PseIdx(len, -1);\n\n        for(int i = len - 1; i >= 0; i--){\n            while(!st.empty() && st.top().first > arr[i]){\n                st.pop();\n            }\n\n            if(st.empty()){\n                st.push({arr[i], i});\n            }else{\n                NseIdx[i] = st.top().second;\n                st.push({arr[i], i});\n            }\n        }\n\n        while(!st.empty()){\n            st.pop();\n        }\n\n        for(int i = 0; i < len; i++){\n            while(!st.empty() && st.top().first >= arr[i]){\n                st.pop();\n            }\n\n            if(st.empty()){\n                st.push({arr[i], i});\n            }else{\n                PseIdx[i] = st.top().second;\n                st.push({arr[i], i});\n            }\n        }\n\n        for (int i = 0; i < len; i++) {\n            long long left_span = i - PseIdx[i];\n            long long right_span = NseIdx[i] - i;\n            long long num_subarrays = left_span * right_span;\n            \n            long long term_contribution = (long long)arr[i] * num_subarrays;\n            sum = (sum + term_contribution) % MOD;\n        }\n\n        if (sum < 0) { \n            sum += MOD;\n        }\n        return static_cast<int>(sum);\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "sum-of-subarray-minimums",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 171,
      "_source": "rest"
    },
    {
      "id": 1665389233,
      "question_id": 943,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750026727,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1665389233/",
      "is_pending": "Not Pending",
      "title": "Sum of Subarray Minimums",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        int len = arr.size();\n        long long sum = 0;\n        const int MOD = 1e9 + 7;\n        stack<pair<int,int>> st;\n        vector<int> NseIdx(len, len);\n        vector<int> PseIdx(len, -1);\n\n        for(int i = len - 1; i >= 0; i--){\n            while(!st.empty() && st.top().first > arr[i]){\n                st.pop();\n            }\n\n            if(st.empty()){\n                st.push({arr[i], i});\n            }else{\n                NseIdx[i] = st.top().second;\n                st.push({arr[i], i});\n            }\n        }\n\n        while(!st.empty()){\n            st.pop();\n        }\n\n        for(int i = 0; i < len; i++){\n            while(!st.empty() && st.top().first > arr[i]){\n                st.pop();\n            }\n\n            if(st.empty()){\n                st.push({arr[i], i});\n            }else{\n                PseIdx[i] = st.top().second;\n                st.push({arr[i], i});\n            }\n        }\n\n        for (int i = 0; i < len; i++) {\n            long long left_span = i - PseIdx[i];\n            long long right_span = NseIdx[i] - i;\n            long long num_subarrays = left_span * right_span;\n            \n            long long term_contribution = (long long)arr[i] * num_subarrays;\n            sum = (sum + term_contribution) % MOD;\n        }\n\n        if (sum < 0) { \n            sum += MOD;\n        }\n        return static_cast<int>(sum);\n    }\n};",
      "compare_result": "1111111111111111011010111111111111111111110010101011111111111111111111111100000000000000",
      "title_slug": "sum-of-subarray-minimums",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 170,
      "_source": "rest"
    },
    {
      "id": 1665300686,
      "question_id": 943,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750016048,
      "status": 14,
      "status_display": "Time Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/1665300686/",
      "is_pending": "Not Pending",
      "title": "Sum of Subarray Minimums",
      "memory": "N/A",
      "code": "#include <vector>\n#include <stack> // Included as it was in your original code\n\n// User: MayankS1h3\n// Date: 2025-06-15 19:30:50 UTC\n\nclass Solution {\npublic:\n    int sumSubarrayMins(std::vector<int>& arr) {\n        int len = arr.size();\n        long long sum = 0; \n        const int MOD = 1e9 + 7;\n\n        for(int i = 0; i < len; i++){\n            // int min_val = 0; \n            int min = 0; \n            \n            std::stack<int> st;\n            for(int j = i; j < len; j++){\n                if(st.empty()){\n                    st.push(arr[j]);\n                    min = st.top();\n                    sum = (sum + min) % MOD;\n                }else if(arr[j] < st.top()){\n                    st.push(arr[j]);\n                    min = st.top();\n                    sum = (sum + min) % MOD;\n                }else{\n                    min = st.top();\n                    sum = (sum + min) % MOD;\n                }\n            }\n        }\n        \n        if (sum < 0) { \n            sum += MOD;\n        }\n        return static_cast<int>(sum);\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111100000000000",
      "title_slug": "sum-of-subarray-minimums",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 169,
      "_source": "rest"
    },
    {
      "id": 1665293298,
      "question_id": 943,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750015408,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1665293298/",
      "is_pending": "Not Pending",
      "title": "Sum of Subarray Minimums",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        int len = arr.size();\n        // stack<int> st;\n        int sum = 0;\n\n        for(int i = 0; i < len; i++){\n            int min = 0;\n            // st = stack<int>();\n            stack<int> st;\n            for(int j = i; j < len; j++){\n                if(st.empty()){\n                    st.push(arr[j]);\n                    min = st.top();\n                    sum += min;\n                }else if(arr[j] < st.top()){\n                    st.push(arr[j]);\n                    min = st.top();\n                    sum += min;\n                }else{\n                    min = st.top();\n                    sum += min;\n                }\n            }\n        }\n        return sum;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111000000000000000",
      "title_slug": "sum-of-subarray-minimums",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 168,
      "_source": "rest"
    },
    {
      "id": 1665226859,
      "question_id": 503,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750010708,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1665226859/",
      "is_pending": "Not Pending",
      "title": "Next Greater Element II",
      "memory": "28.3 MB",
      "code": "class Solution {\npublic:\n    std::vector<int> nextGreaterElements(std::vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::vector<int> result(n, -1); // Initialize results with -1\n        std::stack<int> s;              // Stack will store indices of elements from nums\n\n        // Loop effectively twice through the array\n        // The first pass (i from 0 to n-1) identifies elements and pushes their indices\n        // The second pass (i from n to 2n-1) helps find wrapping NGEs for elements still in stack\n        for (int i = 0; i < 2 * n; ++i) {\n            int current_num = nums[i % n]; // Current number, handles circularity\n\n            // While stack is not empty and the number at the index on top of stack\n            // is smaller than the current number\n            while (!s.empty() && nums[s.top()] < current_num) {\n                // The number at s.top() has found its next greater element\n                result[s.top()] = current_num;\n                s.pop(); // Pop it as its NGE is found\n            }\n\n            // If we are in the first pass through the original array elements\n            if (i < n) {\n                // Push the index of the current element onto the stack.\n                // These are the elements for which we are seeking an NGE.\n                s.push(i);\n            }\n        }\n\n        // Any indices remaining in the stack do not have a next greater element\n        // (they are already initialized to -1 in result).\n        return result;\n    }\n};\n",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "next-greater-element-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 167,
      "_source": "rest"
    },
    {
      "id": 1663345247,
      "question_id": 225,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749852267,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1663345247/",
      "is_pending": "Not Pending",
      "title": "Implement Stack using Queues",
      "memory": "9.5 MB",
      "code": "class MyStack {\n    queue<int> q1;\n    queue<int> q2;\npublic:\n    MyStack() {\n        \n    }\n    \n    void push(int x) {\n        q1.push(x);\n    }\n    \n    int pop() {\n        int popVal;\n        while(q1.size() != 1){\n            q2.push(q1.front());\n            q1.pop();\n        }\n        popVal = q1.front();\n        q1.pop();\n        \n        while(!q2.empty()){\n            q1.push(q2.front());\n            q2.pop();\n        }\n\n        return popVal;\n    }\n    \n    int top() {\n        int topVal;\n        while(q1.size() != 1){\n            q2.push(q1.front());\n            q1.pop();\n        }\n        topVal = q1.front();\n        q2.push(q1.front());\n        q1.pop();\n\n        while(!q2.empty()){\n            q1.push(q2.front());\n            q2.pop();\n        }\n\n        return topVal;\n    }\n    \n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */",
      "compare_result": "111111111111111111",
      "title_slug": "implement-stack-using-queues",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 166,
      "_source": "rest"
    },
    {
      "id": 1663338181,
      "question_id": 232,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749851120,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1663338181/",
      "is_pending": "Not Pending",
      "title": "Implement Queue using Stacks",
      "memory": "9.7 MB",
      "code": "class MyQueue {\n    stack<int> st1;\n    stack<int> st2;\npublic:\n    MyQueue() {\n    }\n    \n    void push(int x) {\n        st1.push(x);\n    }\n    \n    int pop() {\n        int poppedVal = INT_MIN;\n        if(st1.empty() && st2.empty()){\n            return poppedVal;\n        }\n\n        if(!st2.empty()){\n            poppedVal = st2.top();\n            st2.pop();\n        }else{\n            while(!st1.empty()){\n                int temp = st1.top();\n                st1.pop();\n                st2.push(temp);\n            }\n            poppedVal = st2.top();\n            st2.pop();\n        }\n\n        return poppedVal;\n    }\n    \n    int peek() {\n        int peekVal = INT_MIN;\n\n        if(st1.empty() && st2.empty()){\n            return peekVal;\n        }\n\n        if(!st2.empty()){\n            peekVal = st2.top();\n        }else{\n            while(!st1.empty()){\n                int temp = st1.top();\n                st1.pop();\n                st2.push(temp);\n            }\n            peekVal = st2.top();\n        }\n\n        return peekVal;\n    }\n    \n    bool empty() {\n        return st1.empty() && st2.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */",
      "compare_result": "1111111111111111111111",
      "title_slug": "implement-queue-using-stacks",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 165,
      "_source": "rest"
    },
    {
      "id": 1662977532,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749822494,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662977532/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "26.1 MB",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int low = 0;\n        int high = nums.size() - 1;\n\n        if(nums.size() == 1){\n            return nums[0];\n        }\n\n        while(low < high){\n            int mid = low + (high - low) / 2;\n\n            if(mid % 2 != 0){\n                mid--;\n            }\n\n            if(nums[mid] == nums[mid + 1]){\n                low = mid + 2;\n            }else{\n                high = mid;\n            }\n        }\n        return nums[low];\n    }\n};",
      "compare_result": "1111111111111111",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 164,
      "_source": "rest"
    },
    {
      "id": 1662815269,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749809479,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662815269/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "26 MB",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int low = 0;\n        int high = n - 1;\n\n        if(n == 1){\n            return nums[0];\n        }\n\n        while(low <= high){\n            int mid = low + (high - low) / 2;\n\n            if(mid == 0 || mid == n - 1){\n                return nums[mid];\n            }\n\n            if(high - low == 2){\n                if(nums[mid] == nums[mid - 1]){\n                    return nums[mid + 1];\n                }else{\n                    return nums[mid - 1];\n                }\n            }\n\n            if( ( high - mid ) % 2 == 0 ){\n                if(nums[mid] == nums[mid - 1]){\n                    high = mid - 2;\n                }else if(nums[mid] == nums[mid + 1]){\n                    low = mid + 2;\n                }else{\n                    return nums[mid];\n                }\n            }else{\n                if(nums[mid] == nums[mid - 1]){\n                    low = mid + 1;\n                }else if(nums[mid] == nums[mid + 1]){\n                    high = mid - 1;\n                }else{\n                    return nums[mid];\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1111111111111111",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 163,
      "_source": "rest"
    },
    {
      "id": 1662813575,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749809352,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662813575/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "26.2 MB",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int low = 0;\n        int high = n - 1;\n\n        if(n == 1){\n            return nums[0];\n        }\n\n        while(low <= high){\n            int mid = low + (high - low) / 2;\n\n            if(high - low == 2){\n                if(nums[mid] == nums[mid - 1]){\n                    return nums[mid + 1];\n                }else{\n                    return nums[mid - 1];\n                }\n            }\n\n            if( ( high - mid ) % 2 == 0 ){\n                if(mid != 0 && mid != n-1 && nums[mid] == nums[mid - 1]){\n                    high = mid - 2;\n                }else if(mid != 0 && mid != n-1 && nums[mid] == nums[mid + 1]){\n                    low = mid + 2;\n                }else{\n                    return nums[mid];\n                }\n            }else{\n                if(mid != 0 && mid != n-1 && nums[mid] == nums[mid - 1]){\n                    low = mid + 1;\n                }else if(mid != 0 && mid != n-1 && nums[mid] == nums[mid + 1]){\n                    high = mid - 1;\n                }else{\n                    return nums[mid];\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1111111111111111",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 162,
      "_source": "rest"
    },
    {
      "id": 1662811430,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749809193,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1662811430/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int low = 0;\n        int high = n - 1;\n\n        if(n == 1){\n            return nums[0];\n        }\n\n        while(low <= high){\n            int mid = low + (high - low) / 2;\n\n            if(high - low == 2){\n                if(nums[mid] == nums[mid - 1]){\n                    return nums[mid + 1];\n                }else{\n                    return nums[mid - 1];\n                }\n            }\n\n            if( ( high - mid ) % 2 == 0 ){\n                if(nums[mid] == nums[mid - 1]){\n                    high = mid - 2;\n                }else if(nums[mid] == nums[mid + 1]){\n                    low = mid + 2;\n                }else{\n                    return nums[mid];\n                }\n            }else{\n                if(nums[mid] == nums[mid - 1]){\n                    low = mid + 1;\n                }else if(nums[mid] == nums[mid + 1]){\n                    high = mid - 1;\n                }else{\n                    return nums[mid];\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1111111000000000",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 161,
      "_source": "rest"
    },
    {
      "id": 1662809468,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749809048,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1662809468/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int low = 0;\n        int high = n - 1;\n\n        if(n == 1){\n            return nums[0];\n        }\n\n        while(low <= high){\n            int mid = low + (high - low) / 2;\n\n            if(high - low == 2){\n                if(nums[mid] == nums[mid - 1]){\n                    return nums[mid + 1];\n                }else{\n                    return nums[mid - 1];\n                }\n            }\n\n            if( ( high - mid ) % 2 == 0 ){\n                if(nums[mid] == nums[mid - 1]){\n                    high = mid - 2;\n                }else{\n                    low = mid + 2;\n                }\n            }else{\n                if(nums[mid] == nums[mid - 1]){\n                    low = mid + 1;\n                }else{\n                    high = mid - 1;\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1111100000000000",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 160,
      "_source": "rest"
    },
    {
      "id": 1662808842,
      "question_id": 540,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749809002,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1662808842/",
      "is_pending": "Not Pending",
      "title": "Single Element in a Sorted Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int n = nums.size();\n        int low = 0;\n        int high = n - 1;\n\n        while(low <= high){\n            int mid = low + (high - low) / 2;\n\n            if(high - low == 2){\n                if(nums[mid] == nums[mid - 1]){\n                    return nums[mid + 1];\n                }else{\n                    return nums[mid - 1];\n                }\n            }\n\n            if( ( high - mid ) % 2 == 0 ){\n                if(nums[mid] == nums[mid - 1]){\n                    high = mid - 2;\n                }else{\n                    low = mid + 2;\n                }\n            }else{\n                if(nums[mid] == nums[mid - 1]){\n                    low = mid + 1;\n                }else{\n                    high = mid - 1;\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1100000000000000",
      "title_slug": "single-element-in-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 159,
      "_source": "rest"
    },
    {
      "id": 1662349052,
      "question_id": 81,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749764494,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662349052/",
      "is_pending": "Not Pending",
      "title": "Search in Rotated Sorted Array II",
      "memory": "17.8 MB",
      "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] == target){\n                return true;\n            }\n\n            if(nums[start] == nums[mid]){\n                start++;\n                continue;\n            }\n\n            if(nums[start] <= nums[mid]){\n                if(target >= nums[start] && target <= nums[mid]){\n                    end = mid - 1;\n                }else{\n                    start = mid + 1;\n                }\n            }else{\n                if(target <= nums[end] && target >= nums[mid]){\n                    start = mid + 1;\n                }else{\n                    end = mid - 1;\n                }\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "search-in-rotated-sorted-array-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 158,
      "_source": "rest"
    },
    {
      "id": 1662310807,
      "question_id": 153,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749759760,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662310807/",
      "is_pending": "Not Pending",
      "title": "Find Minimum in Rotated Sorted Array",
      "memory": "14.2 MB",
      "code": "class Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n        int minEle = INT_MAX;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[start] <= nums[mid]){\n                minEle = min(minEle,nums[start]);\n                start = mid + 1;\n            }else{\n                minEle = min(minEle,nums[mid]);\n                end = mid - 1;\n            }\n        }\n        return minEle;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "find-minimum-in-rotated-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 157,
      "_source": "rest"
    },
    {
      "id": 1662293013,
      "question_id": 81,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749757986,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1662293013/",
      "is_pending": "Not Pending",
      "title": "Search in Rotated Sorted Array II",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] == target){\n                return true;\n            }\n\n            if(nums[start] <= nums[mid]){\n                if(target >= nums[start] && target <= nums[mid]){\n                    end = mid - 1;\n                }else{\n                    start = mid + 1;\n                }\n            }else{\n                if(target <= nums[end] && target >= nums[mid]){\n                    start = mid + 1;\n                }else{\n                    end = mid - 1;\n                }\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "111011010111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111010",
      "title_slug": "search-in-rotated-sorted-array-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 156,
      "_source": "rest"
    },
    {
      "id": 1662281984,
      "question_id": 33,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749756986,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1662281984/",
      "is_pending": "Not Pending",
      "title": "Search in Rotated Sorted Array",
      "memory": "15.3 MB",
      "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] == target){\n                return mid;\n            }\n\n            if(nums[start] <= nums[mid]){\n                if(target >= nums[start] && target <= nums[mid]){\n                    end = mid - 1;\n                }else{\n                    start = mid + 1;\n                }\n            }else{\n                if(target <= nums[end] && target >= nums[mid]){\n                    start = mid + 1;\n                }else{\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "search-in-rotated-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 155,
      "_source": "rest"
    },
    {
      "id": 1662279220,
      "question_id": 33,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749756756,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1662279220/",
      "is_pending": "Not Pending",
      "title": "Search in Rotated Sorted Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] == target){\n                return mid;\n            }\n\n            if(nums[start] < nums[mid]){\n                if(target >= nums[start] && target <= nums[mid]){\n                    end = mid - 1;\n                }else{\n                    start = mid + 1;\n                }\n            }else{\n                if(target <= nums[end] && target >= nums[mid]){\n                    start = mid + 1;\n                }else{\n                    end = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};",
      "compare_result": "1111111111101111111111111111111111111111111111111111111111101111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "search-in-rotated-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 154,
      "_source": "rest"
    },
    {
      "id": 1662270757,
      "question_id": 33,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1749756062,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1662270757/",
      "is_pending": "Not Pending",
      "title": "Search in Rotated Sorted Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0;\n        int end = n - 1;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] == target){\n                return mid;\n            }else{\n                if(nums[start] < nums[mid] && target >= nums[start] && target <= nums[mid]){\n                    end = mid - 1;\n                }else{\n                    start = mid + 1;\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111011111111111111110011111101101111101011111111111111101111111111111011111111111111101111111011111110111111111101111111111111101110111011101010111111111110111101111",
      "title_slug": "search-in-rotated-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 153,
      "_source": "rest"
    },
    {
      "id": 1661922164,
      "question_id": 35,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1749733359,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1661922164/",
      "is_pending": "Not Pending",
      "title": "Search Insert Position",
      "memory": "13.7 MB",
      "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0; \n        int end = n - 1;\n        int idx = n;\n\n        while(start <= end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] < target){\n                start = mid + 1;\n            }else if(nums[mid] > target){\n                idx = mid;\n                end = mid - 1;\n            }else{\n                return mid;\n            }\n        }\n\n        return idx;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "search-insert-position",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 152,
      "_source": "rest"
    },
    {
      "id": 1661921164,
      "question_id": 35,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 3 weeks",
      "timestamp": 1749733284,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1661921164/",
      "is_pending": "Not Pending",
      "title": "Search Insert Position",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int n = nums.size();\n        int start = 0; \n        int end = n - 1;\n        int idx = n;\n\n        while(start < end){\n            int mid = start + (end - start) / 2;\n\n            if(nums[mid] < target){\n                start = mid + 1;\n            }else if(nums[mid] > target){\n                idx = mid;\n                end = mid - 1;\n            }else{\n                return mid;\n            }\n        }\n\n        return idx;\n    }\n};",
      "compare_result": "111000111000100110011010111111001111000100001111110010101100111111",
      "title_slug": "search-insert-position",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 151,
      "_source": "rest"
    },
    {
      "id": 1644705025,
      "question_id": 1341,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748241192,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1644705025/",
      "is_pending": "Not Pending",
      "title": "Split a String in Balanced Strings",
      "memory": "8.4 MB",
      "code": "class Solution {\npublic:\n    int balancedStringSplit(string s) {\n        int n = s.size();\n        int sum = 0;\n        int cnt = 0;\n        \n        for(int i = 0; i < n; i++){\n            if(s[i] == 'R') sum++;\n            else sum--;\n            \n            if(sum == 0)cnt++;\n        }\n        return cnt;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111",
      "title_slug": "split-a-string-in-balanced-strings",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 150,
      "_source": "rest"
    },
    {
      "id": 1644694149,
      "question_id": 404,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748240408,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1644694149/",
      "is_pending": "Not Pending",
      "title": "Sum of Left Leaves",
      "memory": "16 MB",
      "code": "class Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root) {\n        \n        if (root == nullptr) {\n            return 0;\n        }\n\n        int totalSum = 0;\n\n        \n        if (root->left != nullptr && \n            root->left->left == nullptr && \n            root->left->right == nullptr) {\n            \n            totalSum += root->left->val;\n        }\n\n        \n        totalSum += sumOfLeftLeaves(root->left);\n\n        \n        totalSum += sumOfLeftLeaves(root->right);\n\n        return totalSum;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "sum-of-left-leaves",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 149,
      "_source": "rest"
    },
    {
      "id": 1644692505,
      "question_id": 404,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748240292,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1644692505/",
      "is_pending": "Not Pending",
      "title": "Sum of Left Leaves",
      "memory": "16.1 MB",
      "code": "class Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root) {\n        // Base Case: If the current node is null, there are no leaves.\n        if (root == nullptr) {\n            return 0;\n        }\n\n        int totalSum = 0;\n\n        // Check if the current node's LEFT child exists AND is a LEAF node.\n        if (root->left != nullptr && \n            root->left->left == nullptr && \n            root->left->right == nullptr) {\n            // If true, root->left is a \"left leaf\". Add its value.\n            totalSum += root->left->val;\n        }\n\n        // Recursively find left leaves in the rest of the left subtree.\n        // (The left child itself, if it was a left leaf, has already been counted.\n        //  This call is for its children and further descendants).\n        totalSum += sumOfLeftLeaves(root->left);\n\n        // Recursively find left leaves in the right subtree.\n        totalSum += sumOfLeftLeaves(root->right);\n\n        return totalSum;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "sum-of-left-leaves",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 148,
      "_source": "rest"
    },
    {
      "id": 1644688764,
      "question_id": 404,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748240022,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1644688764/",
      "is_pending": "Not Pending",
      "title": "Sum of Left Leaves",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root) {\n        if(root == NULL){\n            return 0;\n        }\n        int sum = 0;\n        if(root->left == NULL && root->right == NULL){\n            sum += root->val;\n        }\n        \n        if(root->left != NULL){\n            sum += sumOfLeftLeaves(root->left);\n        }\n        \n        TreeNode* temp = nullptr;\n        if(root->right != NULL){\n            temp = root->right;\n        }\n        \n        if(temp != nullptr && (temp->left != NULL || temp->right != NULL)){\n            sum += sumOfLeftLeaves(temp);\n        }\n        \n        return sum;\n    }\n};",
      "compare_result": "1011111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "sum-of-left-leaves",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 147,
      "_source": "rest"
    },
    {
      "id": 1643341747,
      "question_id": 450,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748110489,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1643341747/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a BST",
      "memory": "34.2 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* inorderSuccessor(TreeNode* node){\n        if(node == NULL){\n            return node;\n        }\n\n        TreeNode* curr = node;\n        while(curr != NULL && curr->left != NULL){\n            curr = curr->left;\n        }\n\n        return curr;\n    }\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if(root == NULL){\n            return root;\n        }\n\n        if(key < root->val){\n            root->left = deleteNode(root->left, key);\n        }else if(key > root->val){\n            root->right = deleteNode(root->right, key);\n        }else{\n            if(root->left == NULL){\n                TreeNode* temp = root->right;\n                delete root;\n                return temp;\n            }else if(root->right == NULL){\n                TreeNode* temp = root->left;\n                delete root;\n                return temp;\n            }else{\n                TreeNode* successor = inorderSuccessor(root->right);\n                root->val = successor->val;\n                root->right = deleteNode(root->right, successor->val);\n            }\n        }\n        return root;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "delete-node-in-a-bst",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 146,
      "_source": "rest"
    },
    {
      "id": 1643341543,
      "question_id": 450,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 months, 1 week",
      "timestamp": 1748110474,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1643341543/",
      "is_pending": "Not Pending",
      "title": "Delete Node in a BST",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* inorderSuccessor(TreeNode* node){\n        if(node == NULL){\n            return node;\n        }\n\n        TreeNode* curr = node;\n        while(curr != NULL && curr->left != NULL){\n            curr = curr->left;\n        }\n\n        return curr;\n    }\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if(root == NULL){\n            return root;\n        }\n\n        if(key < root->val){\n            root->left = deleteNode(root->left, key);\n        }else if(key > root->val){\n            root->right = deleteNode(root->right, key);\n        }else{\n            if(root->left == NULL){\n                TreeNode* temp = root->right;\n                delete root;\n                return temp;\n            }else if(root->right == NULL){\n                TreeNode* temp = root->left;\n                free(root);\n                return temp;\n            }else{\n                TreeNode* successor = inorderSuccessor(root->right);\n                root->val = successor->val;\n                root->right = deleteNode(root->right, successor->val);\n            }\n        }\n        return root;\n    }\n};",
      "compare_result": "111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "title_slug": "delete-node-in-a-bst",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 145,
      "_source": "rest"
    }
  ],
  "comprehensive_analysis": {
    "total_submissions": 200,
    "accepted_submissions": 155,
    "failed_submissions": 45,
    "acceptance_rate": 77.5,
    "unique_problems_attempted": 95,
    "unique_problems_solved": 94,
    "problem_solving_rate": 98.94736842105263,
    "avg_attempts_per_problem": 2.1052631578947367,
    "problems_with_multiple_attempts": 53,
    "language_stats": {
      "cpp": 166,
      "mysql": 29,
      "javascript": 5
    },
    "status_stats": {
      "Accepted": 155,
      "Wrong Answer": 21,
      "Runtime Error": 9,
      "Internal Error": 8,
      "Compile Error": 2,
      "Time Limit Exceeded": 5
    },
    "yearly_stats": {
      "2025": 200
    },
    "monthly_stats": {
      "2025-08": 2,
      "2025-07": 107,
      "2025-06": 85,
      "2025-05": 6
    }
  }
}