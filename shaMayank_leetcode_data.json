{
  "metadata": {
    "username": "shaMayank",
    "fetch_timestamp": "2025-08-02T18:28:46.504513",
    "total_submissions_fetched": 120,
    "fetcher_version": "3.1_fixed"
  },
  "user_profile": {
    "username": "shaMayank",
    "profile": {
      "realName": "shaMayank",
      "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg",
      "ranking": 993715,
      "reputation": 0,
      "aboutMe": "",
      "countryName": null,
      "company": null,
      "jobTitle": null,
      "school": null,
      "skillTags": [],
      "postViewCount": 0,
      "solutionCount": 0
    },
    "submitStatsGlobal": {
      "acSubmissionNum": [
        {
          "difficulty": "All",
          "count": 131,
          "submissions": 219
        },
        {
          "difficulty": "Easy",
          "count": 80,
          "submissions": 131
        },
        {
          "difficulty": "Medium",
          "count": 49,
          "submissions": 85
        },
        {
          "difficulty": "Hard",
          "count": 2,
          "submissions": 3
        }
      ],
      "totalSubmissionNum": [
        {
          "difficulty": "All",
          "count": 135,
          "submissions": 316
        },
        {
          "difficulty": "Easy",
          "count": 82,
          "submissions": 167
        },
        {
          "difficulty": "Medium",
          "count": 50,
          "submissions": 142
        },
        {
          "difficulty": "Hard",
          "count": 3,
          "submissions": 7
        }
      ]
    },
    "badges": [
      {
        "id": "7542693",
        "displayName": "50 Days Badge 2025",
        "icon": "https://assets.leetcode.com/static_assets/others/lg2550.png",
        "hoverText": "50 Days Badge 2025"
      }
    ]
  },
  "submission_history": [
    {
      "id": "1719868569",
      "title": "Minimum Path Sum",
      "titleSlug": "minimum-path-sum",
      "timestamp": "1754072545",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1719868569/",
      "isPending": "Not Pending",
      "memory": "15.4 MB",
      "topicTags": []
    },
    {
      "id": 1719868569,
      "question_id": 64,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "18 hours, 36 minutes",
      "timestamp": 1754072545,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1719868569/",
      "is_pending": "Not Pending",
      "title": "Minimum Path Sum",
      "memory": "15.4 MB",
      "code": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        for(int i = 1; i < m; ++i) grid[i][0] += grid[i-1][0];\n        for(int j = 1; j < n; ++j) grid[0][j] += grid[0][j-1];\n        for(int i = 1; i < m; ++i)\n            for(int j = 1; j < n; ++j)\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1]);\n        return grid[m-1][n-1];\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "minimum-path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 324
    },
    {
      "id": "1718702734",
      "title": "Longest Common Prefix",
      "titleSlug": "longest-common-prefix",
      "timestamp": "1753985542",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1718702734/",
      "isPending": "Not Pending",
      "memory": "12 MB",
      "topicTags": []
    },
    {
      "id": 1718702734,
      "question_id": 14,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 day, 18 hours",
      "timestamp": 1753985542,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1718702734/",
      "is_pending": "Not Pending",
      "title": "Longest Common Prefix",
      "memory": "12 MB",
      "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (strs.empty()) return \"\";\n        string prefix = strs[0];\n        for (int i = 1; i < strs.size(); i++) {\n            while (strs[i].find(prefix) != 0) {\n                prefix = prefix.substr(0, prefix.size() - 1);\n                if (prefix.empty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "longest-common-prefix",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 323
    },
    {
      "id": "1717586918",
      "title": "Trapping Rain Water",
      "titleSlug": "trapping-rain-water",
      "timestamp": "1753904827",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "4 ms",
      "url": "/submissions/detail/1717586918/",
      "isPending": "Not Pending",
      "memory": "27.2 MB",
      "topicTags": []
    },
    {
      "id": 1717586918,
      "question_id": 42,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 days, 17 hours",
      "timestamp": 1753904827,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "4 ms",
      "url": "/submissions/detail/1717586918/",
      "is_pending": "Not Pending",
      "title": "Trapping Rain Water",
      "memory": "27.2 MB",
      "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        if (n <= 2) return 0;          \n\n\n        vector<int> prefixMax(n);\n        prefixMax[0] = height[0];\n        for (int i = 1; i < n; ++i)\n            prefixMax[i] = max(prefixMax[i - 1], height[i]);\n\n\n        vector<int> suffixMax(n);\n        suffixMax[n - 1] = height[n - 1];\n        for (int i = n - 2; i >= 0; --i)\n            suffixMax[i] = max(suffixMax[i + 1], height[i]);\n\n        long long total = 0;           \n        for (int i = 0; i < n; ++i) {\n            int level = min(prefixMax[i], suffixMax[i]);\n            if (level > height[i])\n                total += level - height[i];\n        }\n        return static_cast<int>(total);\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "trapping-rain-water",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 322
    },
    {
      "id": "1716806392",
      "title": "Invert Binary Tree",
      "titleSlug": "invert-binary-tree",
      "timestamp": "1753862304",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716806392/",
      "isPending": "Not Pending",
      "memory": "12.5 MB",
      "topicTags": []
    },
    {
      "id": 1716806392,
      "question_id": 226,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 5 hours",
      "timestamp": 1753862304,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716806392/",
      "is_pending": "Not Pending",
      "title": "Invert Binary Tree",
      "memory": "12.5 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if(!root){\n            return root;\n        }\n\n        queue<TreeNode*> q;\n        q.push(root);\n\n        while(!q.empty()){\n            TreeNode* node = q.front();\n            q.pop();\n\n            TreeNode* temp = node->left;\n            node->left = node->right;\n            node->right = temp;\n\n            if(node->left) q.push(node->left);\n            if(node->right) q.push(node->right);\n        }\n        return root;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "invert-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 321
    },
    {
      "id": "1716693498",
      "title": "Path Sum",
      "titleSlug": "path-sum",
      "timestamp": "1753855679",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716693498/",
      "isPending": "Not Pending",
      "memory": "21.6 MB",
      "topicTags": []
    },
    {
      "id": 1716693498,
      "question_id": 112,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 6 hours",
      "timestamp": 1753855679,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716693498/",
      "is_pending": "Not Pending",
      "title": "Path Sum",
      "memory": "21.6 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(!root) return false;\n\n        stack<TreeNode*> path;\n        stack<int> sum;\n        path.push(root);\n        sum.push(root->val);\n\n        while(!path.empty()){\n            TreeNode* temp = path.top();\n            path.pop();\n            int tempVal = sum.top();\n            sum.pop();\n            if(temp->left == nullptr && temp->right == nullptr && tempVal == targetSum){\n                return true;\n            }\n\n            if(temp->left){\n                path.push(temp->left);\n                sum.push(temp->left->val + tempVal);\n            }\n            if(temp->right){\n                path.push(temp->right);\n                sum.push(temp->right->val + tempVal);\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 320
    },
    {
      "id": 1716675269,
      "question_id": 112,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 7 hours",
      "timestamp": 1753854725,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1716675269/",
      "is_pending": "Not Pending",
      "title": "Path Sum",
      "memory": "21.6 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(!root) return false;\n\n        stack<TreeNode*> path;\n        stack<int> sum;\n        path.push(root);\n        sum.push(root->val);\n\n        while(!path.empty()){\n            TreeNode* temp = path.top();\n            path.pop();\n            int tempVal = sum.top();\n            sum.pop();\n            if(temp->left == nullptr && temp->right == nullptr && tempVal == targetSum){\n                return true;\n            }\n\n            if(temp->left){\n                path.push(temp->left);\n                sum.push(temp->left->val + tempVal);\n            }\n            if(temp->right){\n                path.push(temp->right);\n                sum.push(temp->right->val + tempVal);\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "path-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 319
    },
    {
      "id": "1716409888",
      "title": "Binary Tree Level Order Traversal",
      "titleSlug": "binary-tree-level-order-traversal",
      "timestamp": "1753830384",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716409888/",
      "isPending": "Not Pending",
      "memory": "17.2 MB",
      "topicTags": []
    },
    {
      "id": 1716409888,
      "question_id": 102,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 13 hours",
      "timestamp": 1753830384,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716409888/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Level Order Traversal",
      "memory": "17.2 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        if(!root) return {};\n\n        queue<TreeNode*> q;\n        vector<vector<int>> res;\n        res.push_back({root->val});\n        q.push(root);\n\n        while(!q.empty()){\n            int size = q.size();\n\n            vector<int> temp;\n            for(int i = 0; i < size; i++){\n                TreeNode* node = q.front();\n                q.pop();\n\n                if(node->left){\n                    q.push(node->left);\n                    temp.push_back(node->left->val);\n                }\n                if(node->right){\n                    q.push(node->right);\n                    temp.push_back(node->right->val);\n                }\n            }\n            if(!temp.empty()){\n                res.push_back(temp);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "binary-tree-level-order-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 318
    },
    {
      "id": "1716403766",
      "title": "Minimum Depth of Binary Tree",
      "titleSlug": "minimum-depth-of-binary-tree",
      "timestamp": "1753829405",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716403766/",
      "isPending": "Not Pending",
      "memory": "146.7 MB",
      "topicTags": []
    },
    {
      "id": 1716403766,
      "question_id": 111,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 14 hours",
      "timestamp": 1753829405,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716403766/",
      "is_pending": "Not Pending",
      "title": "Minimum Depth of Binary Tree",
      "memory": "146.7 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(!root) return 0;\n\n        queue<TreeNode*> q;\n        q.push(root);\n        int level = 0;\n\n        while(!q.empty()){\n            level++;\n            int size = q.size();\n\n            for(int i = 0; i < size; i++){\n                TreeNode *node = q.front();\n                q.pop();\n                if(!node->left && !node->right){\n                    return level;\n                }\n                if(node->left) q.push(node->left);\n                if(node->right) q.push(node->right);\n            }\n        }\n\n        return -1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111",
      "title_slug": "minimum-depth-of-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 317
    },
    {
      "id": "1716392311",
      "title": "Average of Levels in Binary Tree",
      "titleSlug": "average-of-levels-in-binary-tree",
      "timestamp": "1753827686",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716392311/",
      "isPending": "Not Pending",
      "memory": "23.9 MB",
      "topicTags": []
    },
    {
      "id": 1716392311,
      "question_id": 637,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 14 hours",
      "timestamp": 1753827686,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716392311/",
      "is_pending": "Not Pending",
      "title": "Average of Levels in Binary Tree",
      "memory": "23.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        vector<double> res;\n        if (!root) return res;\n\n        queue<TreeNode*> q;\n        q.push(root);\n\n        while (!q.empty()) {\n            int sz = q.size();\n            long long sum = 0;          // avoid overflow for large trees\n\n            for (int i = 0; i < sz; ++i) {\n                TreeNode* node = q.front();\n                q.pop();\n\n                sum += node->val;\n                if (node->left)  q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n            res.push_back(static_cast<double>(sum) / sz);\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "average-of-levels-in-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 316
    },
    {
      "id": "1716360162",
      "title": "Single Number",
      "titleSlug": "single-number",
      "timestamp": "1753823507",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716360162/",
      "isPending": "Not Pending",
      "memory": "20.6 MB",
      "topicTags": []
    },
    {
      "id": 1716360162,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 15 hours",
      "timestamp": 1753823507,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716360162/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.6 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int n = nums.size();\n        int XOR = 0;\n\n        for(int num : nums){\n            XOR ^= num;\n        }\n\n        return XOR;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 315
    },
    {
      "id": "1716356622",
      "title": "Minimum Size Subarray Sum",
      "titleSlug": "minimum-size-subarray-sum",
      "timestamp": "1753823117",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716356622/",
      "isPending": "Not Pending",
      "memory": "32 MB",
      "topicTags": []
    },
    {
      "id": 1716356622,
      "question_id": 209,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 15 hours",
      "timestamp": 1753823117,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1716356622/",
      "is_pending": "Not Pending",
      "title": "Minimum Size Subarray Sum",
      "memory": "32 MB",
      "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n = nums.size();\n        int minLen = INT_MAX;\n        int sum = 0;\n        int left = 0;\n\n        for(int right = 0; right < n; right++){\n            sum += nums[right];\n\n            while(sum >= target && left <= right){\n                minLen = min(minLen, right - left + 1);\n                sum -= nums[left++];\n            }\n        }\n\n        return minLen == INT_MAX ? 0 : minLen;\n    }\n};",
      "compare_result": "111111111111111111111",
      "title_slug": "minimum-size-subarray-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 314
    },
    {
      "id": 1716339202,
      "question_id": 209,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 16 hours",
      "timestamp": 1753821389,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1716339202/",
      "is_pending": "Not Pending",
      "title": "Minimum Size Subarray Sum",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n = nums.size();\n        int left = 0;\n        int right = 0;\n\n        int sum = 0;\n        int minLen = INT_MAX;\n\n        while(right < n){\n            sum += nums[right];\n            \n            if(sum < target){\n                right++;\n            }else if(sum > target){\n                while(sum > target){\n                    sum -= nums[left++];\n                }\n                right++;\n            }\n\n            if(sum == target){\n                int len = right - left;\n                minLen = min(minLen, len);\n            }\n        }\n        return minLen != INT_MAX ? minLen : 0;\n    }\n};",
      "compare_result": "111001100101000110000",
      "title_slug": "minimum-size-subarray-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 313
    },
    {
      "id": "1716318776",
      "title": "Contains Duplicate II",
      "titleSlug": "contains-duplicate-ii",
      "timestamp": "1753819584",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "77 ms",
      "url": "/submissions/detail/1716318776/",
      "isPending": "Not Pending",
      "memory": "98.8 MB",
      "topicTags": []
    },
    {
      "id": 1716318776,
      "question_id": 219,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 16 hours",
      "timestamp": 1753819584,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "77 ms",
      "url": "/submissions/detail/1716318776/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate II",
      "memory": "98.8 MB",
      "code": "class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        int n = nums.size();\n        unordered_map<int,int> mpp;\n\n        for(int i = 0; i < n; i++){\n            if(mpp.find(nums[i]) == mpp.end()){\n                mpp[nums[i]] = i;\n            }else{\n                int diff = i - mpp[nums[i]];\n                if(diff <= k){\n                    return true;\n                }else{\n                    mpp[nums[i]] = i;\n                }\n            }\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 312
    },
    {
      "id": "1716269453",
      "title": "Squares of a Sorted Array",
      "titleSlug": "squares-of-a-sorted-array",
      "timestamp": "1753816104",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "5 ms",
      "url": "/submissions/detail/1716269453/",
      "isPending": "Not Pending",
      "memory": "31.3 MB",
      "topicTags": []
    },
    {
      "id": 1716269453,
      "question_id": 1019,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 17 hours",
      "timestamp": 1753816104,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "5 ms",
      "url": "/submissions/detail/1716269453/",
      "is_pending": "Not Pending",
      "title": "Squares of a Sorted Array",
      "memory": "31.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> res;\n        int sqr = 0;\n\n        for(int i = 0; i < n; i++){\n            sqr = nums[i] * nums[i];\n            res.push_back(sqr);\n        }\n\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "squares-of-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 311
    },
    {
      "id": 1716269121,
      "question_id": 1019,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 17 hours",
      "timestamp": 1753816085,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "11 ms",
      "url": "/submissions/detail/1716269121/",
      "is_pending": "Not Pending",
      "title": "Squares of a Sorted Array",
      "memory": "31.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> res;\n        int sqr = 0;\n\n        for(int i = 0; i < n; i++){\n            sqr = nums[i] * nums[i];\n            res.push_back(sqr);\n        }\n\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "squares-of-a-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 310
    },
    {
      "id": "1716145625",
      "title": "Number of Islands",
      "titleSlug": "number-of-islands",
      "timestamp": "1753810400",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "29 ms",
      "url": "/submissions/detail/1716145625/",
      "isPending": "Not Pending",
      "memory": "24.5 MB",
      "topicTags": []
    },
    {
      "id": 1716145625,
      "question_id": 200,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 19 hours",
      "timestamp": 1753810400,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "29 ms",
      "url": "/submissions/detail/1716145625/",
      "is_pending": "Not Pending",
      "title": "Number of Islands",
      "memory": "24.5 MB",
      "code": "class Solution {\nprivate:\n    void bfs(int r, int c, vector<vector<int>>& vis, vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        queue<pair<int,int>> q;\n        vis[r][c] = 1;\n        q.push({r, c});\n        int dr[4] = {-1, 0, 1, 0};\n        int dc[4] = {0, 1, 0, -1};\n        while (!q.empty()) {\n            auto [x, y] = q.front();\n            q.pop();\n            for (int k = 0; k < 4; ++k) {\n                int nx = x + dr[k], ny = y + dc[k];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] == '1' && !vis[nx][ny]) {\n                    vis[nx][ny] = 1;\n                    q.push({nx, ny});\n                }\n            }\n        }\n    }\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size(), cnt = 0;\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                if (grid[i][j] == '1' && !vis[i][j]) {\n                    ++cnt;\n                    bfs(i, j, vis, grid);\n                }\n        return cnt;\n    }\n};\n",
      "compare_result": "1111111111111111111111111111111111111111111111111",
      "title_slug": "number-of-islands",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 309
    },
    {
      "id": "1716088866",
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
      "timestamp": "1753807983",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "4 ms",
      "url": "/submissions/detail/1716088866/",
      "isPending": "Not Pending",
      "memory": "14.7 MB",
      "topicTags": []
    },
    {
      "id": 1716088866,
      "question_id": 1482,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 20 hours",
      "timestamp": 1753807983,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "4 ms",
      "url": "/submissions/detail/1716088866/",
      "is_pending": "Not Pending",
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "memory": "14.7 MB",
      "code": "class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> temp(nums);\n        unordered_map<int,int> mpp;\n        vector<int> res;\n\n        sort(temp.begin(), temp.end());\n\n        for(int i = 0; i < n; i++){\n            if(mpp.find(temp[i]) == mpp.end()){\n                mpp[temp[i]] = i;\n            }\n        }\n\n        for(int i = 0; i < n; i++){\n            res.push_back(mpp[nums[i]]);\n        }\n\n        return res;\n\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "how-many-numbers-are-smaller-than-the-current-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 308
    },
    {
      "id": "1715914656",
      "title": "Two Sum",
      "titleSlug": "two-sum",
      "timestamp": "1753799861",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "1 ms",
      "url": "/submissions/detail/1715914656/",
      "isPending": "Not Pending",
      "memory": "14.8 MB",
      "topicTags": []
    },
    {
      "id": 1715914656,
      "question_id": 1,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 22 hours",
      "timestamp": 1753799861,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1715914656/",
      "is_pending": "Not Pending",
      "title": "Two Sum",
      "memory": "14.8 MB",
      "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        unordered_map<int,int> seen;\n        int diff;\n\n        for(int i = 0; i < n; i++){\n            diff = target - nums[i];\n            if(seen.find(diff) != seen.end()){\n                return {seen[diff], i};\n            }\n            seen[nums[i]] = i;\n        }\n\n        return {-1,-1};\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "two-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 307
    },
    {
      "id": 1715893306,
      "question_id": 1,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 22 hours",
      "timestamp": 1753798829,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1715893306/",
      "is_pending": "Not Pending",
      "title": "Two Sum",
      "memory": "14.6 MB",
      "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        vector<pair<int,int>> numsIdx;\n        vector<int> res;\n\n        for(int i = 0; i < n; i++){\n            numsIdx.push_back({nums[i], i});\n        }\n\n        sort(numsIdx.begin(), numsIdx.end());\n\n        int start = 0;\n        int end = n - 1;\n\n        while(start < end){\n            int mid = start + (end - start) / 2;\n            int sum = numsIdx[start].first + numsIdx[end].first;\n\n            if(sum == target){\n                return {numsIdx[start].second, numsIdx[end].second};\n            }else if(sum > target){\n                end--;\n            }else{\n                start++;\n            }\n        }\n\n        return {-1,-1};\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "two-sum",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 306
    },
    {
      "id": "1715805955",
      "title": "Find All Numbers Disappeared in an Array",
      "titleSlug": "find-all-numbers-disappeared-in-an-array",
      "timestamp": "1753794321",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "91 ms",
      "url": "/submissions/detail/1715805955/",
      "isPending": "Not Pending",
      "memory": "66.1 MB",
      "topicTags": []
    },
    {
      "id": 1715805955,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 23 hours",
      "timestamp": 1753794321,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "91 ms",
      "url": "/submissions/detail/1715805955/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "66.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        set<int> st;\n        vector<int> res;\n\n        for(int num : nums){\n            st.insert(num);\n        }\n\n        for(int i = 1; i <= n; i++){\n            if(st.find(i) == st.end()){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 305
    },
    {
      "id": 1715805808,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 days, 23 hours",
      "timestamp": 1753794312,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "84 ms",
      "url": "/submissions/detail/1715805808/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "66.1 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        set<int> st;\n        vector<int> res;\n\n        for(int num : nums){\n            st.insert(num);\n        }\n\n        for(int i = 1; i <= n; i++){\n            if(st.find(i) == st.end()){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 304
    },
    {
      "id": 1715797260,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793825,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1715797260/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "52.9 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 303
    },
    {
      "id": 1715797130,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793818,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "16 ms",
      "url": "/submissions/detail/1715797130/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "52.9 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 302
    },
    {
      "id": 1715796643,
      "question_id": 448,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753793791,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1715796643/",
      "is_pending": "Not Pending",
      "title": "Find All Numbers Disappeared in an Array",
      "memory": "53 MB",
      "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<int> res;\n        int num = 1;\n        int i = 0;\n\n        while(i < n){\n            if(num == nums[i]){\n                num++;\n                i++;\n            }else if(num > nums[i]){\n                i++;\n            }else{\n                for(int j = num; j < nums[i]; j++){\n                    res.push_back(j);\n                }\n                num = nums[i] + 1;\n                i++;\n            }\n        }\n\n        if(nums[n-1] != n){\n            for(int i = num ; i <= n; i++){\n                res.push_back(i);\n            }\n        }\n\n        return res;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "find-all-numbers-disappeared-in-an-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 301
    },
    {
      "id": "1715769496",
      "title": "Missing Number",
      "titleSlug": "missing-number",
      "timestamp": "1753792135",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1715769496/",
      "isPending": "Not Pending",
      "memory": "21.8 MB",
      "topicTags": []
    },
    {
      "id": 1715769496,
      "question_id": 268,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days",
      "timestamp": 1753792135,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1715769496/",
      "is_pending": "Not Pending",
      "title": "Missing Number",
      "memory": "21.8 MB",
      "code": "class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        int expectedSum = (n * (n+1)) / 2;\n        int actualSum = 0;\n\n        for(int num : nums){\n            actualSum += num;\n        }\n        return expectedSum - actualSum;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "missing-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 300
    },
    {
      "id": "1714925087",
      "title": "Permutations",
      "titleSlug": "permutations",
      "timestamp": "1753726290",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1714925087/",
      "isPending": "Not Pending",
      "memory": "10.4 MB",
      "topicTags": []
    },
    {
      "id": 1714925087,
      "question_id": 46,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 days, 18 hours",
      "timestamp": 1753726290,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1714925087/",
      "is_pending": "Not Pending",
      "title": "Permutations",
      "memory": "10.4 MB",
      "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        backtrack(0, nums, res);\n        return res;\n    }\nprivate:\n    void backtrack(int first, vector<int>& nums, vector<vector<int>>& res) {\n        if (first == nums.size()) {\n            res.push_back(nums);\n            return;\n        }\n        for (int i = first; i < nums.size(); ++i) {\n            swap(nums[first], nums[i]);\n            backtrack(first + 1, nums, res);\n            swap(nums[first], nums[i]);\n        }\n    }\n};\n",
      "compare_result": "11111111111111111111111111",
      "title_slug": "permutations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 299
    },
    {
      "id": "1713722410",
      "title": "Print in Order",
      "titleSlug": "print-in-order",
      "timestamp": "1753640366",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "17 ms",
      "url": "/submissions/detail/1713722410/",
      "isPending": "Not Pending",
      "memory": "9.6 MB",
      "topicTags": []
    },
    {
      "id": 1713722410,
      "question_id": 1203,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "5 days, 18 hours",
      "timestamp": 1753640366,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "17 ms",
      "url": "/submissions/detail/1713722410/",
      "is_pending": "Not Pending",
      "title": "Print in Order",
      "memory": "9.6 MB",
      "code": "#include <functional>\n#include <mutex>\n#include <condition_variable>\n\nclass Foo {\n    std::mutex mtx;\n    std::condition_variable cv;\n    int turn = 1;\npublic:\n    void first(std::function<void()> printFirst) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 1; });\n        printFirst();\n        turn = 2;\n        cv.notify_all();\n    }\n    void second(std::function<void()> printSecond) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 2; });\n        printSecond();\n        turn = 3;\n        cv.notify_all();\n    }\n    void third(std::function<void()> printThird) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [&]{ return turn == 3; });\n        printThird();\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "print-in-order",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 298
    },
    {
      "id": "1710101788",
      "title": "Symmetric Tree",
      "titleSlug": "symmetric-tree",
      "timestamp": "1753381489",
      "statusDisplay": "Accepted",
      "lang": "cpp",
      "runtime": "0 ms",
      "url": "/submissions/detail/1710101788/",
      "isPending": "Not Pending",
      "memory": "18.4 MB",
      "topicTags": []
    },
    {
      "id": 1710101788,
      "question_id": 101,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 1 day",
      "timestamp": 1753381489,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1710101788/",
      "is_pending": "Not Pending",
      "title": "Symmetric Tree",
      "memory": "18.4 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool mirror(TreeNode* a, TreeNode* b) {\n        if (!a || !b) return a == b;\n        if (a->val != b->val) return false;\n        return mirror(a->left, b->right) && mirror(a->right, b->left);\n    }\npublic:\n    bool isSymmetric(TreeNode* root) {\n        return mirror(root->left, root->right);\n    }\n};\n",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "symmetric-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 297
    },
    {
      "id": 1709028448,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753306138,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1709028448/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "21.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool helperFunc(TreeNode* root, TreeNode* min, TreeNode* max){\n        if(!root) return true;\n        if(min != nullptr && root->val <= min->val){\n            return false;\n        }\n        if(max != nullptr && root->val >= max->val){\n            return false;\n        }\n\n        return helperFunc(root->left, min, root)\n                && helperFunc(root->right, root, max);\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        return helperFunc(root, nullptr, nullptr);\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 296
    },
    {
      "id": 1708956195,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753299357,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1708956195/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        if(!root) return true;\n\n        bool leftSubTree = isValidBST(root->left);\n        bool rightSubTree = isValidBST(root->right);\n\n        bool left = true;\n        bool right = true;\n\n        if(root->left && root->val <= root->left->val){\n            left = false;\n        }\n        if(root->right && root->val >= root->right->val){\n            right = false;\n        }\n\n        return leftSubTree && rightSubTree && left && right;\n    }\n};",
      "compare_result": "11111111111100010010011111111111111111111111111111111111111111111111111111011111011111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 295
    },
    {
      "id": 1708954803,
      "question_id": 98,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753299253,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1708954803/",
      "is_pending": "Not Pending",
      "title": "Validate Binary Search Tree",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        if(!root) return true;\n\n        bool leftSubTree = isValidBST(root->left);\n        bool rightSubTree = isValidBST(root->right);\n\n        bool left = true;\n        bool right = true;\n\n        if(root->left && root->val < root->left->val){\n            left = false;\n        }\n        if(root->right && root->val > root->right->val){\n            right = false;\n        }\n\n        return leftSubTree && rightSubTree && left && right;\n    }\n};",
      "compare_result": "11110001101100010010011111111111111111111101111111111111111011110000111111011110011111",
      "title_slug": "validate-binary-search-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 294
    },
    {
      "id": 1708798987,
      "question_id": 104,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 2 days",
      "timestamp": 1753291327,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1708798987/",
      "is_pending": "Not Pending",
      "title": "Maximum Depth of Binary Tree",
      "memory": "18.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(!root) return 0;\n        int maximumDepth = max(maxDepth(root->left), maxDepth(root->right));\n        return maximumDepth + 1;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "maximum-depth-of-binary-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 293
    },
    {
      "id": 1707837868,
      "question_id": 349,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753227415,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1707837868/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Arrays",
      "memory": "14.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> st;\n        vector<int> res;\n\n        for(auto const &num : nums1){\n            st.insert(num);\n        }\n        for(auto const &num : nums2){\n            if(st.count(num)){\n                if( find(res.begin(), res.end(), num) == res.end() ){\n                    res.push_back(num);\n                }\n            }\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-arrays",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 292
    },
    {
      "id": 1707833106,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226666,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707833106/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.5 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int xorRes = 0;\n\n        for(int num : nums){\n            xorRes ^= num;\n        }\n\n        return xorRes;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 291
    },
    {
      "id": 1707833051,
      "question_id": 136,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226658,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "2 ms",
      "url": "/submissions/detail/1707833051/",
      "is_pending": "Not Pending",
      "title": "Single Number",
      "memory": "20.5 MB",
      "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int xorRes = 0;\n\n        for(int num : nums){\n            xorRes ^= num;\n        }\n\n        return xorRes;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 290
    },
    {
      "id": 1707829598,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753226114,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "55 ms",
      "url": "/submissions/detail/1707829598/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "90.7 MB",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_map<int, int> mp;\n\n        for(int i = 0; i < nums.size(); i++){\n            if(mp.find(nums[i]) != mp.end()) return true;\n            mp[nums[i]] = i;\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 289
    },
    {
      "id": 1707828539,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225941,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1707828539/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_map<int, int> mp;\n\n        for(int i = 0; i < nums.size(); i++){\n            if(mp.find(nums[i]) != mp.end()) return true;\n            mp[i] = nums[i];\n        }\n        return false;\n    }\n};",
      "compare_result": "11111010101111100000110110101101011001001000101111001111111111111000011111010",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 288
    },
    {
      "id": 1707826686,
      "question_id": 217,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225650,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "106 ms",
      "url": "/submissions/detail/1707826686/",
      "is_pending": "Not Pending",
      "title": "Contains Duplicate",
      "memory": "92.4 MB",
      "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        set<int> st;\n\n        for(auto const &num : nums){\n            if(st.find(num) != st.end()) return true;\n            st.insert(num);\n        }\n        return false;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "contains-duplicate",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 287
    },
    {
      "id": 1707824412,
      "question_id": 189,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753225291,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707824412/",
      "is_pending": "Not Pending",
      "title": "Rotate Array",
      "memory": "29.6 MB",
      "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        if(n <= 1){\n            return;\n        }\n\n        k %= n;\n\n        int start = 0;\n        int end = n - k - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = n - k;\n        end = n -1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = 0;\n        end = n - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111",
      "title_slug": "rotate-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 286
    },
    {
      "id": 1707815352,
      "question_id": 189,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753223873,
      "status": 15,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1707815352/",
      "is_pending": "Not Pending",
      "title": "Rotate Array",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n\n        int start = 0;\n        int end = n - k - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = n - k;\n        end = n -1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n\n        start = 0;\n        end = n - 1;\n\n        while(start < end){\n            swap(nums[start++], nums[end--]);\n        }\n    }\n};",
      "compare_result": "111100000000000000000000000000000000000",
      "title_slug": "rotate-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 285
    },
    {
      "id": 1707811099,
      "question_id": 26,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753223246,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707811099/",
      "is_pending": "Not Pending",
      "title": "Remove Duplicates from Sorted Array",
      "memory": "22.6 MB",
      "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int n = nums.size();\n        int slow = 0;\n\n        for(int fast = 0; fast < n; fast++){\n            if(nums[fast] != nums[slow]){\n                swap(nums[slow + 1], nums[fast]);\n                slow++;\n            }\n        }\n        return slow + 1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "remove-duplicates-from-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 284
    },
    {
      "id": 1707807468,
      "question_id": 283,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753222728,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707807468/",
      "is_pending": "Not Pending",
      "title": "Move Zeroes",
      "memory": "24 MB",
      "code": "class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n = nums.size();\n        int slow = 0;\n        for(int fast = 0; fast < n; fast++){\n            if(nums[fast] != 0){\n                swap(nums[slow++], nums[fast]);\n            }\n        }\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "move-zeroes",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 283
    },
    {
      "id": 1707634914,
      "question_id": 8,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 3 days",
      "timestamp": 1753208497,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1707634914/",
      "is_pending": "Not Pending",
      "title": "String to Integer (atoi)",
      "memory": "9.2 MB",
      "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        int i = 0, sign = 1, result = 0;\n        while (i < s.size() && s[i] == ' ') i++;\n        if (i < s.size() && (s[i] == '+' || s[i] == '-')) {\n            sign = (s[i] == '-') ? -1 : 1;\n            i++;\n        }\n        while (i < s.size() && isdigit(s[i])) {\n            int digit = s[i] - '0';\n            if (result > (INT_MAX - digit) / 10)\n                return sign == 1 ? INT_MAX : INT_MIN;\n            result = result * 10 + digit;\n            i++;\n        }\n        return result * sign;\n    }\n};\n",
      "compare_result
      "title_slug": "string-to-integer-atoi",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 282
    },
    {
      "id": 1706308487,
      "question_id": 350,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 week, 4 days",
      "timestamp": 1753120374,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1 ms",
      "url": "/submissions/detail/1706308487/",
      "is_pending": "Not Pending",
      "title": "Intersection of Two Arrays II",
      "memory": "15 MB",
      "code": "class Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int, int> m;\n        vector<int> res;\n        for (int num : nums1) m[num]++;\n        for (int num : nums2) {\n            if (m[num] > 0) {\n                res.push_back(num);\n                m[num]--;\n            }\n        }\n        return res;\n    }\n};\n",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "intersection-of-two-arrays-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 281
    },
    {
      "id": 1704681415,
      "question_id": 619,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010604,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "412 ms",
      "url": "/submissions/detail/1704681415/",
      "is_pending": "Not Pending",
      "title": "Biggest Single Number",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect max(num) as num\nfrom (select num\n    from MyNumbers\n    group by num\n    having count(*) = 1) temp;",
      "compare_result": "111111111111111111",
      "title_slug": "biggest-single-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 280
    },
    {
      "id": 1704677323,
      "question_id": 1877,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010324,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "479 ms",
      "url": "/submissions/detail/1704677323/",
      "is_pending": "Not Pending",
      "title": "Find Followers Count",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect user_id, \ncount(distinct follower_id) as followers_count\nfrom Followers\ngroup by user_id;\n",
      "compare_result": "1111111111111111111111",
      "title_slug": "find-followers-count",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 279
    },
    {
      "id": 1704675032,
      "question_id": 596,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1753010170,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "328 ms",
      "url": "/submissions/detail/1704675032/",
      "is_pending": "Not Pending",
      "title": "Classes With at Least 5 Students",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect class\nfrom Courses\ngroup by class\nhaving count(distinct student) >= 5;",
      "compare_result": "11111111111",
      "title_slug": "classes-with-at-least-5-students",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 278
    },
    {
      "id": 1704463171,
      "question_id": 2495,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752994915,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "548 ms",
      "url": "/submissions/detail/1704463171/",
      "is_pending": "Not Pending",
      "title": "Number of Unique Subjects Taught by Each Teacher",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect t.teacher_id,\ncount(distinct t.subject_id) as cnt\nfrom Teacher t\ngroup by t.teacher_id;",
      "compare_result": "11111111111111",
      "title_slug": "number-of-unique-subjects-taught-by-each-teacher",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 277
    },
    {
      "id": 1704450017,
      "question_id": 1773,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752994084,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "938 ms",
      "url": "/submissions/detail/1704450017/",
      "is_pending": "Not Pending",
      "title": "Percentage of Users Attended a Contest",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nwith TotalUsers as (\n    select count(user_id) as total_count from Users\n    ) \nselect r.contest_id, \nround(count(r.user_id) * 100 / tu.total_count, 2) as percentage\nfrom Register r\ncross join TotalUsers tu\ngroup by r.contest_id\norder by percentage desc, r.contest_id asc;",
      "compare_result": "11111111111111",
      "title_slug": "percentage-of-users-attended-a-contest",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 276
    },
    {
      "id": 1704369811,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752988803,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "973 ms",
      "url": "/submissions/detail/1704369811/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nifnull(round(sum(p.price * u.units) / sum(u.units),2), 0) as average_price\nfrom Prices p\nleft join UnitsSold u\non p.product_id = u.product_id\nand u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111111111111111111",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 275
    },
    {
      "id": 1704354580,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752987677,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1704354580/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nifnull(round(sum(p.price * u.units) / sum(u.units),2), 0) as average_price\nfrom Prices p\nleft join UnitsSold u\non p.product_id = u.product_id\nwhere u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111011111111111100",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 274
    },
    {
      "id": 1704348866,
      "question_id": 1390,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752987243,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1704348866/",
      "is_pending": "Not Pending",
      "title": "Average Selling Price",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.product_id,\nround(sum(p.price * u.units) / sum(u.units),2) as average_price\nfrom Prices p\njoin UnitsSold u\non p.product_id = u.product_id\nwhere u.purchase_date between p.start_date and p.end_date\ngroup by p.product_id\norder by product_id;\n",
      "compare_result": "111011111111111100",
      "title_slug": "average-selling-price",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 273
    },
    {
      "id": 1703996614,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954123,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "570 ms",
      "url": "/submissions/detail/1703996614/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.project_id, round(avg(e.experience_years), 2) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": "11111111",
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 272
    },
    {
      "id": 1703996472,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954113,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703996472/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.project_id, round(avg(e.experience_years), 2) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": null,
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 271
    },
    {
      "id": 1703995367,
      "question_id": 1161,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752954025,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1703995367/",
      "is_pending": "Not Pending",
      "title": "Project Employees I",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect p.project_id, avg(e.experience_years) as average_years\nfrom Project p\nleft join Employee e\non p.employee_id = e.employee_id\ngroup by p.project_id;",
      "compare_result": "11100000",
      "title_slug": "project-employees-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 270
    },
    {
      "id": 1703990089,
      "question_id": 620,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953625,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "266 ms",
      "url": "/submissions/detail/1703990089/",
      "is_pending": "Not Pending",
      "title": "Not Boring Movies",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect * \nfrom Cinema\nwhere id % 2 = 1 and description != 'boring'\norder by rating desc;",
      "compare_result": "11111111",
      "title_slug": "not-boring-movies",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 269
    },
    {
      "id": 1703990007,
      "question_id": 620,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953619,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703990007/",
      "is_pending": "Not Pending",
      "title": "Not Boring Movies",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect * \nfrom Cinema\nwhere id % 2 = 1 and description != 'boring'\norder by rating desc;",
      "compare_result": null,
      "title_slug": "not-boring-movies",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 268
    },
    {
      "id": 1703984771,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953217,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703984771/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect e2.name\nfrom Employee e1\njoin Employee e2\non e1.managerId = e2.id\ngroup by e2.name, e2.id\nhaving count(*) >= 5;",
      "compare_result": null,
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 267
    },
    {
      "id": 1703984542,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752953198,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "387 ms",
      "url": "/submissions/detail/1703984542/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect e2.name\nfrom Employee e1\njoin Employee e2\non e1.managerId = e2.id\ngroup by e2.id\nhaving count(*) >= 5;",
      "compare_result": "11111111111",
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 266
    },
    {
      "id": 1703969898,
      "question_id": 570,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752952168,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "389 ms",
      "url": "/submissions/detail/1703969898/",
      "is_pending": "Not Pending",
      "title": "Managers with at Least 5 Direct Reports",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect name \nfrom Employee\nwhere id in\n    (select managerId\n    from Employee\n    group by managerId\n    having count(*) >= 5);\n",
      "compare_result": "11111111111",
      "title_slug": "managers-with-at-least-5-direct-reports",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 265
    },
    {
      "id": 1703850300,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945632,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703850300/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 264
    },
    {
      "id": 1703850171,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945624,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703850171/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 263
    },
    {
      "id": 1703849863,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945610,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "2107 ms",
      "url": "/submissions/detail/1703849863/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": "11111111111111",
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 262
    },
    {
      "id": 1703849760,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945604,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703849760/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect \nst.student_id,\nst.student_name, \nsb.subject_name, \ncount(ex.student_id) as attended_exams\nfrom \nStudents st\ncross join \nSubjects sb\nleft join \nExaminations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by \nst.student_id, sb.subject_name\norder by \nst.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 261
    },
    {
      "id": 1703848256,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945527,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1452 ms",
      "url": "/submissions/detail/1703848256/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": "11111111111111",
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 260
    },
    {
      "id": 1703846579,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945444,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703846579/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 259
    },
    {
      "id": 1703846430,
      "question_id": 1415,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "1 week, 6 days",
      "timestamp": 1752945437,
      "status": 16,
      "status_display": "Internal Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1703846430/",
      "is_pending": "Not Pending",
      "title": "Students and Examinations",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect st.student_id, st.student_name, sb.subject_name, count(ex.student_id) as attended_exams\nfrom Students st\ncross join Subjects sb\nleft join Examinations ex \non st.student_id = ex.student_id and sb.subject_name = ex.subject_name\ngroup by st.student_id, sb.subject_name\norder by st.student_id,sb.subject_name;\n",
      "compare_result": null,
      "title_slug": "students-and-examinations",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 258
    },
    {
      "id": 1702188613,
      "question_id": 577,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752826467,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "971 ms",
      "url": "/submissions/detail/1702188613/",
      "is_pending": "Not Pending",
      "title": "Employee Bonus",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect e.name, b.bonus\nfrom Employee e \nleft join Bonus b\non e.empId = b.empId\nwhere b.bonus <  1000 or b.bonus is null;",
      "compare_result": "111111111111111111111",
      "title_slug": "employee-bonus",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 257
    },
    {
      "id": 1702179366,
      "question_id": 197,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752825756,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1702179366/",
      "is_pending": "Not Pending",
      "title": "Rising Temperature",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect id \nfrom (  select w.*,\n        lag(temperature) over (order by recordDate) as prev_day_temp\n        from Weather w) temp\nwhere temp.temperature > temp.prev_day_temp;",
      "compare_result": "111111111011110",
      "title_slug": "rising-temperature",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 256
    },
    {
      "id": 1702178689,
      "question_id": 197,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752825702,
      "status": 11,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/1702178689/",
      "is_pending": "Not Pending",
      "title": "Rising Temperature",
      "memory": "N/A",
      "code": "# Write your MySQL query statement below\nselect id \nfrom (  select w.*,\n        lag(temperature) over () as prev_day_temp\n        from Weather w) temp\nwhere temp.temperature > temp.prev_day_temp;",
      "compare_result": "111111010010000",
      "title_slug": "rising-temperature",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 255
    },
    {
      "id": 1702169118,
      "question_id": 1724,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752824941,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1284 ms",
      "url": "/submissions/detail/1702169118/",
      "is_pending": "Not Pending",
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect customer_id, count(v.visit_id) as count_no_trans\nfrom Visits v\nleft join Transactions t\non v.visit_id = t.visit_id\nwhere t.transaction_id is NULL\ngroup by v.customer_id;\n",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 254
    },
    {
      "id": 1702160918,
      "question_id": 1724,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752824305,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1399 ms",
      "url": "/submissions/detail/1702160918/",
      "is_pending": "Not Pending",
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect customer_id, count(*) as count_no_trans\nfrom Visits\nwhere visit_id not in (select distinct visit_id from Transactions)\ngroup by customer_id;",
      "compare_result": "11111111111111111111111111111",
      "title_slug": "customer-who-visited-but-did-not-make-any-transactions",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 253
    },
    {
      "id": 1702144356,
      "question_id": 1153,
      "lang": "mysql",
      "lang_name": "MySQL",
      "time": "2 weeks, 1 day",
      "timestamp": 1752823122,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "1179 ms",
      "url": "/submissions/detail/1702144356/",
      "is_pending": "Not Pending",
      "title": "Product Sales Analysis I",
      "memory": "0.0B",
      "code": "# Write your MySQL query statement below\nselect p.product_name, s.year, s.price\nfrom Sales s\nleft join Product p\non s.product_id = p.product_id;",
      "compare_result": "1111111111111",
      "title_slug": "product-sales-analysis-i",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 252
    },
    {
      "id": 1701622709,
      "question_id": 100,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 1 day",
      "timestamp": 1752775093,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1701622709/",
      "is_pending": "Not Pending",
      "title": "Same Tree",
      "memory": "12.9 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n * int val;\n * TreeNode *left;\n * TreeNode *right;\n * TreeNode() : val(0), left(nullptr), right(nullptr) {}\n * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (!p && !q) {\n            return true;\n        }\n        if (!p || !q || p->val != q->val) {\n            return false;\n        }\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "same-tree",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 251
    },
    {
      "id": 1697843890,
      "question_id": 6,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 4 days",
      "timestamp": 1752515071,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1697843890/",
      "is_pending": "Not Pending",
      "title": "Zigzag Conversion",
      "memory": "14.3 MB",
      "code": "class Solution {\npublic:\n   string convert(string s, int numRows) {\n       if (numRows == 1) return s;\n       \n       vector<string> rows(min(numRows, int(s.size())));\n       int curRow = 0;\n       bool goingDown = false;\n       \n       for (char c : s) {\n           rows[curRow] += c;\n           if (curRow == 0 || curRow == numRows - 1) {\n               goingDown = !goingDown;\n           }\n           curRow += goingDown ? 1 : -1;\n       }\n       \n       string result;\n       for (string row : rows) {\n           result += row;\n       }\n       return result;\n   }\n};",
      "compare_result
      "title_slug": "zigzag-conversion",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 250
    },
    {
      "id": 1696670686,
      "question_id": 102,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 5 days",
      "timestamp": 1752429065,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1696670686/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Level Order Traversal",
      "memory": "17 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        if (!root) return {};\n        \n        vector<vector<int>> result;\n        queue<TreeNode*> q;\n        q.push(root);\n        \n        while (!q.empty()) {\n            int size = q.size();\n            vector<int> level;\n            \n            for (int i = 0; i < size; i++) {\n                TreeNode* node = q.front();\n                q.pop();\n                level.push_back(node->val);\n                \n                if (node->left) q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n            \n            result.push_back(level);\n        }\n        \n        return result;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111",
      "title_slug": "binary-tree-level-order-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 249
    },
    {
      "id": 1695506446,
      "question_id": 263,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "2 weeks, 6 days",
      "timestamp": 1752342394,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1695506446/",
      "is_pending": "Not Pending",
      "title": "Ugly Number",
      "memory": "7.7 MB",
      "code": "class Solution {\npublic:\n   bool isUgly(int n) {\n       if (n <= 0) return false;\n       \n       while (n % 2 == 0) n /= 2;\n       while (n % 3 == 0) n /= 3;\n       while (n % 5 == 0) n /= 5;\n       \n       return n == 1;\n   }\n};",
      "compare_result
      "title_slug": "ugly-number",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 248
    },
    {
      "id": 1694529786,
      "question_id": 118,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks",
      "timestamp": 1752255772,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1694529786/",
      "is_pending": "Not Pending",
      "title": "Pascal's Triangle",
      "memory": "9.7 MB",
      "code": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<vector<int>> triangle(numRows);\n        \n        for (int i = 0; i < numRows; i++) {\n            triangle[i].resize(i + 1);\n            triangle[i][0] = triangle[i][i] = 1;\n            \n            for (int j = 1; j < i; j++) {\n                triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];\n            }\n        }\n        \n        return triangle;\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "pascals-triangle",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 247
    },
    {
      "id": 1693486003,
      "question_id": 13,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 1 day",
      "timestamp": 1752170782,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "15 ms",
      "url": "/submissions/detail/1693486003/",
      "is_pending": "Not Pending",
      "title": "Roman to Integer",
      "memory": "13.4 MB",
      "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map<char, int> roman = {\n            {'I', 1}, {'V', 5}, {'X', 10},\n            {'L', 50}, {'C', 100},\n            {'D', 500}, {'M', 1000}\n        };\n\n        int total = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (i + 1 < s.size() && roman[s[i]] < roman[s[i + 1]]) {\n                total -= roman[s[i]];\n            } else {\n                total += roman[s[i]];\n            }\n        }\n        return total;\n    }\n};\n",
      "compare_result
      "title_slug": "roman-to-integer",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 246
    },
    {
      "id": 1689921091,
      "question_id": 66,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 4 days",
      "timestamp": 1751911815,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1689921091/",
      "is_pending": "Not Pending",
      "title": "Plus One",
      "memory": "11.6 MB",
      "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        for (int i = digits.size() - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i]++;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        \n        vector<int> result(digits.size() + 1, 0);\n        result[0] = 1;\n        return result;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "plus-one",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 245
    },
    {
      "id": 1688751358,
      "question_id": 94,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "3 weeks, 5 days",
      "timestamp": 1751826550,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1688751358/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Inorder Traversal",
      "memory": "10.8 MB",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> result;\n        TreeNode* current = root;\n        \n        while (current != nullptr) {\n            if (current->left == nullptr) {\n                result.push_back(current->val);\n                current = current->right;\n            } else {\n                TreeNode* predecessor = current->left;\n                while (predecessor->right != nullptr && predecessor->right != current) {\n                    predecessor = predecessor->right;\n                }\n                if (predecessor->right == nullptr) {\n                    predecessor->right = current;\n                    current = current->left;\n                } else {\n                    predecessor->right = nullptr;\n                    result.push_back(current->val);\n                    current = current->right;\n                }\n            }\n        }\n        \n        return result;\n    }\n};\n",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "binary-tree-inorder-traversal",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 244
    },
    {
      "id": 1686068983,
      "question_id": 2789,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626982,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "50 ms",
      "url": "/submissions/detail/1686068983/",
      "is_pending": "Not Pending",
      "title": "Counter II",
      "memory": "56.3 MB",
      "code": "/**\n * @param {integer} init\n * @return { increment: Function, decrement: Function, reset: Function }\n */\nvar createCounter = function(init) {\n    let temp = init;\n    return {\n        increment : () => {\n            return ++temp;\n        },\n        decrement : () => {\n            return --temp;\n        },\n        reset : () => {\n            temp = init;\n            return temp;\n        }\n    }\n};\n\n/**\n * const counter = createCounter(5)\n * counter.increment(); // 6\n * counter.reset(); // 5\n * counter.decrement(); // 4\n */",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "counter-ii",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 243
    },
    {
      "id": 1686065438,
      "question_id": 2732,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626725,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "29 ms",
      "url": "/submissions/detail/1686065438/",
      "is_pending": "Not Pending",
      "title": "Counter",
      "memory": "55 MB",
      "code": "/**\n * @param {number} n\n * @return {Function} counter\n */\nvar createCounter = function(n) {\n    \n    return function() {\n        return n++;\n    };\n};\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */",
      "compare_result": "11111111111111111111111",
      "title_slug": "counter",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 242
    },
    {
      "id": 1686063963,
      "question_id": 2813,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626623,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "37 ms",
      "url": "/submissions/detail/1686063963/",
      "is_pending": "Not Pending",
      "title": "To Be Or Not To Be",
      "memory": "53.4 MB",
      "code": "/**\n * @param {string} val\n * @return {Object}\n */\nvar expect = function(val) {\n    return {\n        toBe : (val2) => {\n            if(val === val2) return true;\n            throw new Error(\"Not Equal\");\n        },\n        notToBe : (val3) => {\n            if(val !== val3) return true;\n            throw new Error(\"Equal\");\n        }\n    }\n};\n\n/**\n * expect(5).toBe(5); // true\n * expect(5).notToBe(5); // throws \"Equal\"\n */",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "to-be-or-not-to-be",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 241
    },
    {
      "id": 1686063439,
      "question_id": 2813,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751626589,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "40 ms",
      "url": "/submissions/detail/1686063439/",
      "is_pending": "Not Pending",
      "title": "To Be Or Not To Be",
      "memory": "53.2 MB",
      "code": "/**\n * @param {string} val\n * @return {Object}\n */\nvar expect = function(val) {\n    return {\n        toBe : function (val2){\n            if(val === val2) return true;\n            throw new Error(\"Not Equal\");\n        },\n        notToBe : function (val3){\n            if(val !== val3) return true;\n            throw new Error(\"Equal\");\n        }\n    }\n};\n\n/**\n * expect(5).toBe(5); // true\n * expect(5).notToBe(5); // throws \"Equal\"\n */",
      "compare_result": "111111111111111111111111111111111111",
      "title_slug": "to-be-or-not-to-be",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 240
    },
    {
      "id": 1686054740,
      "question_id": 2809,
      "lang": "javascript",
      "lang_name": "JavaScript",
      "time": "4 weeks, 1 day",
      "timestamp": 1751625994,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "48 ms",
      "url": "/submissions/detail/1686054740/",
      "is_pending": "Not Pending",
      "title": "Create Hello World Function",
      "memory": "52.8 MB",
      "code": "/**\n * @return {Function}\n */\nvar createHelloWorld = function() {\n    \n    return function(...args) {\n        return \"Hello World\";\n    }\n};\n\n/**\n * const f = createHelloWorld();\n * f(); // \"Hello World\"\n */",
      "compare_result": "1111111111111111111111111",
      "title_slug": "create-hello-world-function",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 239
    },
    {
      "id": 1685363834,
      "question_id": 125,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "4 weeks, 1 day",
      "timestamp": 1751565883,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1685363834/",
      "is_pending": "Not Pending",
      "title": "Valid Palindrome",
      "memory": "9.8 MB",
      "code": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        int left = 0, right = s.size() - 1;\n        while (left < right) {\n            while (left < right && !isalnum(s[left])) left++;\n            while (left < right && !isalnum(s[right])) right--;\n            if (tolower(s[left]) != tolower(s[right])) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n};\n",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "valid-palindrome",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 238
    },
    {
      "id": 1684218156,
      "question_id": 88,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751480521,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1684218156/",
      "is_pending": "Not Pending",
      "title": "Merge Sorted Array",
      "memory": "12.3 MB",
      "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int i = m - 1, j = n - 1, k = m + n - 1;\n        while (j >= 0) {\n            if (i >= 0 && nums1[i] > nums2[j]) {\n                nums1[k--] = nums1[i--];\n            } else {\n                nums1[k--] = nums2[j--];\n            }\n        }\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111",
      "title_slug": "merge-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 237
    },
    {
      "id": 1684217275,
      "question_id": 88,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751480477,
      "status": 20,
      "status_display": "Compile Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1684217275/",
      "is_pending": "Not Pending",
      "title": "Merge Sorted Array",
      "memory": "N/A",
      "code": "#include <vector>\nusing namespace std;\n\nvoid merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1, j = n - 1, k = m + n - 1;\n    while (j >= 0) {\n        if (i >= 0 && nums1[i] > nums2[j]) {\n            nums1[k--] = nums1[i--];\n        } else {\n            nums1[k--] = nums2[j--];\n        }\n    }\n}",
      "compare_result": null,
      "title_slug": "merge-sorted-array",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 236
    },
    {
      "id": 1681792491,
      "question_id": 58,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751306997,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1681792491/",
      "is_pending": "Not Pending",
      "title": "Length of Last Word",
      "memory": "8.8 MB",
      "code": "class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int i = s.length() - 1;\n        while (i >= 0 && s[i] == ' ') i--;\n        int length = 0;\n        while (i >= 0 && s[i] != ' ') {\n            length++;\n            i--;\n        }\n        return length;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "length-of-last-word",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 235
    },
    {
      "id": 1680673837,
      "question_id": 54,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751221537,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1680673837/",
      "is_pending": "Not Pending",
      "title": "Spiral Matrix",
      "memory": "9.3 MB",
      "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) return {};\n        \n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> result;\n        \n        int top = 0, bottom = m - 1;\n        int left = 0, right = n - 1;\n        \n        while (top <= bottom && left <= right) {\n            for (int j = left; j <= right; j++) {\n                result.push_back(matrix[top][j]);\n            }\n            top++;\n            \n            for (int i = top; i <= bottom; i++) {\n                result.push_back(matrix[i][right]);\n            }\n            right--;\n            \n            if (top <= bottom) {\n                for (int j = right; j >= left; j--) {\n                    result.push_back(matrix[bottom][j]);\n                }\n                bottom--;\n            }\n            \n            if (left <= right) {\n                for (int i = bottom; i >= top; i--) {\n                    result.push_back(matrix[i][left]);\n                }\n                left++;\n            }\n        }\n        \n        return result;\n    }\n};",
      "compare_result": "11111111111111111111111111",
      "title_slug": "spiral-matrix",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 234
    },
    {
      "id": 1679583994,
      "question_id": 79,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751134097,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "192 ms",
      "url": "/submissions/detail/1679583994/",
      "is_pending": "Not Pending",
      "title": "Word Search",
      "memory": "10.6 MB",
      "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        int m = board.size(), n = board[0].size();\n        for(int i=0;i<m;i++)\n            for(int j=0;j<n;j++)\n                if(dfs(board, word, i, j, 0))\n                    return true;\n        return false;\n    }\n    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int d) {\n        if(d == word.size()) return true;\n        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j]!=word[d])\n            return false;\n        char c = board[i][j];\n        board[i][j] = '#';\n        bool found = dfs(board, word, i+1, j, d+1) ||\n                     dfs(board, word, i-1, j, d+1) ||\n                     dfs(board, word, i, j+1, d+1) ||\n                     dfs(board, word, i, j-1, d+1);\n        board[i][j] = c;\n        return found;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "word-search",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 233
    },
    {
      "id": 1678587472,
      "question_id": 28,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751048004,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1678587472/",
      "is_pending": "Not Pending",
      "title": "Find the Index of the First Occurrence in a String",
      "memory": "8.8 MB",
      "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if (needle.empty()) return 0;\n        int n = haystack.size(), m = needle.size();\n        for (int i = 0; i <= n - m; ++i) {\n            if (haystack.substr(i, m) == needle)\n                return i;\n        }\n        return -1;\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 232
    },
    {
      "id": 1678586751,
      "question_id": 28,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1751047962,
      "status": 20,
      "status_display": "Compile Error",
      "runtime": "N/A",
      "url": "/submissions/detail/1678586751/",
      "is_pending": "Not Pending",
      "title": "Find the Index of the First Occurrence in a String",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n    if (needle.empty()) return 0;\n    int n = haystack.size(), m = needle.size();\n    for (int i = 0; i <= n - m; ++i) {\n        if (haystack.substr(i, m) == needle)\n            return i;\n    }\n    return -1;\n}\n\nint main() {\n    string haystack, needle;\n    cin >> haystack >> needle;\n    cout << strStr(haystack, needle) << endl;\n    return 0;\n}",
      "compare_result": null,
      "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 231
    },
    {
      "id": 1677540350,
      "question_id": 12,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month",
      "timestamp": 1750961067,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "10 ms",
      "url": "/submissions/detail/1677540350/",
      "is_pending": "Not Pending",
      "title": "Integer to Roman",
      "memory": "12.7 MB",
      "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n    vector<pair<int, string>> valueSymbols = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"},  {90, \"XC\"},  {50, \"L\"},  {40, \"XL\"},\n        {10, \"X\"},   {9, \"IX\"},   {5, \"V\"},   {4, \"IV\"}, {1, \"I\"}\n    };\n    string result;\n    for (const auto& [value, symbol] : valueSymbols) {\n        while (num >= value) {\n            result += symbol;\n            num -= value;\n        }\n    }\n    return result;\n}\n};",
      "compare_result
      "title_slug": "integer-to-roman",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 230
    },
    {
      "id": 1676364307,
      "question_id": 5,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750874125,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1676364307/",
      "is_pending": "Not Pending",
      "title": "Longest Palindromic Substring",
      "memory": "9.2 MB",
      "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n    int n = s.size();\n    if (n < 2) return s;\n    int start = 0, maxLen = 1;\n    for (int i = 0; i < n;) {\n        if (n - i <= maxLen / 2) break;\n        int left = i, right = i;\n        while (right < n - 1 && s[right + 1] == s[right]) ++right;\n        i = right + 1;\n        while (left > 0 && right < n - 1 && s[left - 1] == s[right + 1]) {\n            --left;\n            ++right;\n        }\n        int len = right - left + 1;\n        if (len > maxLen) {\n            start = left;\n            maxLen = len;\n        }\n    }\n    return s.substr(start, maxLen);\n}\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "longest-palindromic-substring",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 229
    },
    {
      "id": 1674064566,
      "question_id": 42,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750702839,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1674064566/",
      "is_pending": "Not Pending",
      "title": "Trapping Rain Water",
      "memory": "25.8 MB",
      "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        int left = 0, right = n - 1, leftMax = 0, rightMax = 0, res = 0;\n        while (left < right) {\n            if (height[left] < height[right]) {\n                if (height[left] >= leftMax)\n                    leftMax = height[left];\n                else\n                    res += leftMax - height[left];\n                left++;\n            } else {\n                if (height[right] >= rightMax)\n                    rightMax = height[right];\n                else\n                    res += rightMax - height[right];\n                right--;\n            }\n        }\n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "trapping-rain-water",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 228
    },
    {
      "id": 1672942901,
      "question_id": 155,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750615903,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "3 ms",
      "url": "/submissions/detail/1672942901/",
      "is_pending": "Not Pending",
      "title": "Min Stack",
      "memory": "23.5 MB",
      "code": "#include <stack>\nusing namespace std;\n\nclass MinStack {\n    stack<int> s, minS;\npublic:\n    MinStack() {}\n\n    void push(int val) {\n        s.push(val);\n        if (minS.empty() || val <= minS.top())\n            minS.push(val);\n    }\n\n    void pop() {\n        if (s.top() == minS.top())\n            minS.pop();\n        s.pop();\n    }\n\n    int top() {\n        return s.top();\n    }\n\n    int getMin() {\n        return minS.top();\n    }\n};",
      "compare_result": "1111111111111111111111111111111",
      "title_slug": "min-stack",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 227
    },
    {
      "id": 1671882831,
      "question_id": 162,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 1 week",
      "timestamp": 1750529995,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/1671882831/",
      "is_pending": "Not Pending",
      "title": "Find Peak Element",
      "memory": "12.5 MB",
      "code": "class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int left = 0, right = nums.size() - 1;\n        while(left < right) {\n            int mid = left + (right - left) / 2;\n            if(nums[mid] > nums[mid + 1]) {\n                right = mid; // Peak is in the left half (including mid)\n            } else {\n                left = mid + 1; // Peak is in the right half\n            }\n        }\n        return left; // or right, since left == right\n    }\n};",
      "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111",
      "title_slug": "find-peak-element",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 226
    },
    {
      "id": 1669157509,
      "question_id": 148,
      "lang": "cpp",
      "lang_name": "C++",
      "time": "1 month, 2 weeks",
      "timestamp": 1750319711,
      "status": 10,
      "status_display": "Accepted",
      "runtime": "20 ms",
      "url": "/submissions/detail/1669157509/",
      "is_pending": "Not Pending",
      "title": "Sort List",
      "memory": "57.1 MB",
      "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* middleSplit(ListNode* head){\n        if(!head || !head->next) return nullptr;  // ✅ Edge case handling\n        \n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = nullptr;\n\n        while(fast && fast->next){\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        prev->next = nullptr;  // ✅ Now guaranteed to be safe\n        return slow;\n    }\n\n    ListNode* merge(ListNode* list1, ListNode* list2){\n        if(!list1) return list2;  // ✅ Handle nulls gracefully\n        if(!list2) return list1;\n        \n        ListNode dummy(0);  // ✅ Stack allocation (minor improvement)\n        ListNode* temp = &dummy;\n\n        while(list1 && list2){\n            if(list1->val <= list2->val){\n                temp->next = list1;\n                list1 = list1->next;\n            }else{\n                temp->next = list2;\n                list2 = list2->next;\n            }\n            temp = temp->next;\n        }\n        \n        temp->next = list1 ? list1 : list2;  // ✅ More concise\n        return dummy.next;\n    }\n    \npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next){\n            return head;\n        }\n\n        ListNode* secondHalf = middleSplit(head);\n        if(!secondHalf) return head;  // ✅ Handle edge case\n        \n        ListNode* list1 = sortList(head);\n        ListNode* list2 = sortList(secondHalf);\n\n        return merge(list1, list2);\n    }\n};",
      "compare_result": "111111111111111111111111111111",
      "title_slug": "sort-list",
      "has_notes": false,
      "flag_type": 1,
      "frontend_id": 225
    }
  ],
  "analysis_summary": {
    "total_submissions": 120,
    "accepted_submissions": 100,
    "unique_problems_attempted": 65,
    "unique_problems_solved": 20,
    "acceptance_rate": 83.33333333333334,
    "language_stats": {
      "cpp": 86,
      "mysql": 29,
      "javascript": 5
    }
  }
}